/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var x=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var B=Object.prototype.hasOwnProperty;var L=(o,d)=>{for(var s in d)x(o,s,{get:d[s],enumerable:!0})},q=(o,d,s,t)=>{if(d&&typeof d=="object"||typeof d=="function")for(let e of M(d))!B.call(o,e)&&e!==s&&x(o,e,{get:()=>d[e],enumerable:!(t=k(d,e))||t.enumerable});return o};var j=o=>q(x({},"__esModule",{value:!0}),o);var z={};L(z,{default:()=>v});module.exports=j(z);var h=require("obsidian");var F={canvasAdded:[]};var r=require("obsidian");var l=require("obsidian");var I=require("obsidian");var P={addCssClass:{title:"Add CSS Class",desc:"The name of the class you want to add to the canvas"},addFilePath:{filePath:"Filepath",desc:"The filepath of the canvas you want to add a class to"},renameCssClass:{title:"Rename CSS Class",desc:"The name of the class you want to rename",placeholder:"New name"},renameFilePath:{title:"Edit canvas filepath",placeholder:"New Filepath",desc:"The new filepath of the canvas you want to rename"},className:"Class Name",addButton:"Add",removeFromCanvas:o=>`Removed ${o[0]} from ${o[1]}`,settings:{title:"Canvas CSS Class Settings",noClassAdded:"No class added yet.",useCommandsInfo:"Use the commands modal to add a canvas and a class.",alreadyApplied:"This class is already applied to this canvas.",newCanvas:{addingInfo:"Use the commands modal to add a class to a new file.",addNewCanvas:"Add new Canvas"},newClass:{addingInfo:"Add a class to this canvas"},edit:{filepath:"Edit filepath",class:"Rename class"},remove:{desc:"Remove all classes from this canvas",title:"Remove"}},commands:{addCanvas:"Add a CSS Class to the active canvas",removeCanvas:"Remove a CSS Class from the active canvas"}};var E={addCssClass:{title:"Ajouter une classe CSS",desc:"Le nom de la classe que vous souhaitez ajouter au Canvas"},addFilePath:{filePath:"Chemin du fichier",desc:"Le chemin du fichier du Canva auquel vous souhaitez ajouter une classe"},renameCssClass:{title:"Renommer une classe CSS",desc:"Le nom de la classe que vous souhaitez renommer",placeholder:"Nouveau nom"},renameFilePath:{title:"Modifier le chemin du Canvas",placeholder:"Nouveau chemin",desc:"Le nouveau chemin du Canvas que vous souhaitez modifier"},className:"Nom de la classe",addButton:"Ajouter",removeFromCanvas:o=>`Suppression de ${o[0]} dans ${o[1]}`,settings:{title:"Param\xE8tre de Canvas CSS Class",noClassAdded:"Aucune classe ajout\xE9e.",useCommandsInfo:"Utilisez la fen\xEAtre de commande pour ajouter un Canvas et une classe.",alreadyApplied:"Cette classe est d\xE9j\xE0 appliqu\xE9e \xE0 ce Canvas.",newCanvas:{addingInfo:"Utilisez la fen\xEAtre de commande pour ajouter une classe \xE0 un nouveau fichier.",addNewCanvas:"Ajouter un nouveau Canvas"},newClass:{addingInfo:"Ajouter une classe"},edit:{filepath:"Modifier le chemin",class:"Renommer la classe"},remove:{desc:"Supprimer toutes les classes",title:"Supprimer"}},commands:{addCanvas:"Ajouter une classe CSS au Canvas actif",removeCanvas:"Supprimer une classe CSS du Canvas actif"}};var N={en:P,fr:E},O=N[I.moment.locale()]||N.en;function D(o,d){return d.split(".").reduce((s,t)=>s?s[t]:void 0,o)}function a(o){return O&&D(O,o)||D(P,o)}var S=a("addButton"),g=a("className"),p=class extends l.Modal{constructor(s,t){super(s);this.onSubmit=t}onOpen(){let{contentEl:s}=this;s.createEl("h1",{text:a("addCssClass.title")}),new l.Setting(s).setName(g).setDesc(a("addCssClass.desc")).addText(t=>t.setPlaceholder(g).onChange(async e=>{this.result=e})),new l.Setting(s).addButton(t=>t.setButtonText(S).onClick(async()=>{this.onSubmit(this.result.replace(/\W+/g,"-").toLowerCase()),this.close()}))}onClose(){let{contentEl:s}=this;s.empty()}},m=class extends l.Modal{constructor(s,t){super(s);this.onSubmit=t}onOpen(){let{contentEl:s}=this;s.createEl("h1",{text:a("addCssClass.title")}),new l.Setting(s).setName(a("addFilePath.filePath")).setDesc(a("addFilePath.desc")).addText(t=>t.setPlaceholder(a("addFilePath.filePath")).onChange(async e=>{this.path=e.replace(".canvas","")+".canvas"})),new l.Setting(s).setName(g).setDesc(a("addCssClass.desc")).addText(t=>t.setPlaceholder(g).onChange(async e=>{this.cssClass=e})),new l.Setting(s).addButton(t=>t.setButtonText(S).onClick(async()=>{this.onSubmit(this.path.replace(".canvas","")+".canvas",this.cssClass.replace(/\W+/g,"-").toLowerCase()),this.close()}))}onClose(){let{contentEl:s}=this;s.empty()}},C=class extends l.Modal{constructor(s,t,e){super(s);this.oldName=t,this.onSubmit=e}onOpen(){let{contentEl:s}=this;s.createEl("h1",{text:a("renameCssClass.title")}),new l.Setting(s).setName(a("renameCssClass.title")).setDesc(a("renameCssClass.desc")).addText(t=>t.setPlaceholder(a("renameCssClass.placeholder")).setValue(this.oldName).onChange(async e=>{this.result=e})),new l.Setting(s).addButton(t=>t.setButtonText(S).onClick(async()=>{this.onSubmit(this.result.replace(/\W+/g,"-").toLowerCase()),this.close()}))}onClose(){let{contentEl:s}=this;s.empty()}},f=class extends l.Modal{constructor(s,t,e){super(s);this.oldPath=t,this.onSubmit=e}onOpen(){let{contentEl:s}=this;s.createEl("h1",{text:a("renameFilePath.title")}),new l.Setting(s).setName(a("renameFilePath.placeholder")).setDesc(a("renameFilePath.desc")).addText(t=>t.setPlaceholder(a("renameFilePath.placeholder")).setValue(this.oldPath).onChange(async e=>{this.result=e})),new l.Setting(s).addButton(t=>t.setButtonText(S).onClick(async()=>{this.onSubmit(this.result.replace(".canvas","")+".canvas"),this.close()}))}onClose(){let{contentEl:s}=this;s.empty()}};var y=class extends r.PluginSettingTab{constructor(s,t){super(s,t);this.plugin=t}display(){let{containerEl:s}=this;s.empty(),s.createEl("h1",{text:a("settings.title")}),this.plugin.settings.canvasAdded.length===0&&(s.createEl("p",{text:a("settings.noClassAdded")}),s.createEl("p",{text:a("settings.useCommandsInfo")})),new r.Setting(s).setDesc(a("settings.newCanvas.addingInfo")).addButton(t=>t.setButtonText(a("settings.newCanvas.addNewCanvas")).onClick(async()=>{new m(this.app,async(e,n)=>{var i,c,T,b;this.plugin.settings.canvasAdded.find(u=>u.canvasPath===e)?(c=(i=this.plugin.settings.canvasAdded.find(u=>u.canvasPath===e))==null?void 0:i.canvasClass)!=null&&c.includes(n)?new r.Notice(a("settings.alreadyApplied")):(b=(T=this.plugin.settings.canvasAdded.find(u=>u.canvasPath===e))==null?void 0:T.canvasClass)==null||b.push(n):this.plugin.settings.canvasAdded.push({canvasPath:e,canvasClass:[n]}),await this.plugin.saveSettings(),this.display(),this.plugin.addToDOM(n,e)}).open()}));for(let t of this.plugin.settings.canvasAdded){new r.Setting(s).setName(t.canvasPath.replace(".canvas","")).setClass("canvas-css-class-title").addExtraButton(e=>e.setIcon("plus").setTooltip(a("settings.newClass.addingInfo")).onClick(async()=>{new p(this.app,async n=>{t.canvasClass.indexOf(n)===-1?(t.canvasClass.push(n),await this.plugin.saveSettings(),this.display(),this.plugin.addToDOM(n,t.canvasPath)):new r.Notice(a("settings.alreadyApplied"))}).open()})).addExtraButton(e=>e.setIcon("edit").setTooltip(a("settings.edit.filepath")).onClick(async()=>{new f(this.app,t.canvasPath.replace(".canvas",""),async n=>{t.canvasPath=n.replace(".canvas","")+".canvas",await this.plugin.saveSettings(),this.display()}).open()})).addExtraButton(e=>e.setIcon("trash").setTooltip(a("settings.remove.desc")).onClick(async()=>{this.plugin.settings.canvasAdded=this.plugin.settings.canvasAdded.filter(n=>n.canvasPath!==t.canvasPath),await this.plugin.saveSettings(),document.body.classList.remove(...t.canvasClass),this.display()}));for(let e of t.canvasClass)new r.Setting(s).setName(e).setClass("canvas-css-class-opt").addExtraButton(n=>n.setIcon("edit").setTooltip(a("settings.edit.class")).onClick(async()=>{new C(this.app,e,async i=>{let c=t.canvasClass.indexOf(e);c>-1&&(t.canvasClass[c]=i),await this.plugin.saveSettings(),this.display(),this.plugin.removeFromDOM(e),this.plugin.addToDOM(i,t.canvasPath)}).open()})).addExtraButton(n=>n.setIcon("cross").setTooltip(a("settings.remove.title")).onClick(async()=>{let i=t.canvasClass.indexOf(e);if(i>-1&&t.canvasClass.splice(i,1),t.canvasClass.length===0){let c=this.plugin.settings.canvasAdded.indexOf(t);c>-1&&this.plugin.settings.canvasAdded.splice(c,1)}await this.plugin.saveSettings(),this.display(),this.plugin.removeFromDOM(e)}))}}};var w=require("obsidian");var A=class extends w.FuzzySuggestModal{constructor(s,t,e,n){super(s);this.plugin=t,this.settings=e,this.filepath=n}getItems(){var t;let s=(t=this.settings.canvasAdded.find(e=>e.canvasPath===this.filepath))==null?void 0:t.canvasClass;return s||[]}getItemText(s){return s}onChooseItem(s,t){let e=this.settings.canvasAdded.find(n=>n.canvasPath===this.filepath);if(e){let n=e.canvasClass.indexOf(s.toString());if(n>-1&&e.canvasClass.splice(n,1),e.canvasClass.length===0){let i=this.settings.canvasAdded.indexOf(e);i>-1&&this.settings.canvasAdded.splice(i,1)}this.plugin.saveSettings(),new w.Notice(a("removeFromCanvas")([s.toString(),this.filepath])),v.removeFromDOM(s.toString())}}};var v=class extends h.Plugin{addToDOM(s,t){document&&(document.querySelector("body").getAttribute("data-canvas-path")===t?document.querySelector("body").classList.add(s):this.removeAllClasses())}removeFromDOM(s){document&&document.querySelector("body").classList.remove(s)}removeAllClasses(){for(let s of this.settings.canvasAdded)for(let t of s.canvasClass)this.removeFromDOM(t)}async onload(){await this.loadSettings(),this.addCommand({id:"add-canvas-css-class",name:a("commands.addCanvas"),checkCallback:s=>{let t=this.app.workspace.getActiveViewOfType(h.ItemView);if((t==null?void 0:t.getViewType())==="canvas"){if(!s){let e=t.file.path;new p(this.app,n=>{let i=this.settings.canvasAdded.find(c=>c.canvasPath===e);i?i.canvasClass.includes(n)?new h.Notice(a("settings.alreadyApplied")):(i.canvasClass.push(n),this.settings.canvasAdded=this.settings.canvasAdded.map(c=>c.canvasPath===e?i:c)):this.settings.canvasAdded.push({canvasPath:e,canvasClass:[n]}),this.saveSettings(),this.addToDOM(n,e)}).open()}return!0}return!1}}),this.addCommand({id:"remove-canvas-css-class",name:a("commands.removeCanvas"),checkCallback:s=>{let t=this.app.workspace.getActiveViewOfType(h.ItemView);if((t==null?void 0:t.getViewType())==="canvas"){let e=t.file.path;return this.settings.canvasAdded.find(i=>i.canvasPath===e)?(s||new A(this.app,this,this.settings,e).open(),!0):!1}return!1}}),this.registerEvent(this.app.workspace.on("file-open",s=>{let t=document.querySelector(".workspace-leaf.mod-active > .workspace-leaf-content").attributes[1].value;if(s&&s.extension==="canvas"){document.querySelector("body").setAttribute("data-canvas-path",s.path),document.querySelector("body").classList.add("canvas-file");let e=this.settings.canvasAdded.filter(i=>i.canvasPath!==s.path);for(let i of e)for(let c of i.canvasClass)this.removeFromDOM(c);let n=this.settings.canvasAdded.find(i=>i.canvasPath===s.path);if(n)for(let i of n.canvasClass)this.addToDOM(i,s.path)}else t!=="canvas"&&(document.querySelector("body").classList.remove("canvas-file"),document.querySelector("body").removeAttribute("data-canvas-path"),this.removeAllClasses())})),this.addSettingTab(new y(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},F,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}static removeFromDOM(s){document.querySelector("body").classList.remove(s)}};
