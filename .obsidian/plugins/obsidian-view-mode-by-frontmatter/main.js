/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    ignoreOpenFiles: false,
    ignoreForceViewAll: false,
};
class ViewModeByFrontmatterPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.OBSIDIAN_UI_MODE_KEY = "obsidianUIMode";
        this.OBSIDIAN_EDITING_MODE_KEY = "obsidianEditingMode";
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new ViewModeByFrontmatterSettingTab(this.app, this));
            this.openedFiles = resetOpenedNotes(this.app);
            const readViewModeFromFrontmatterAndToggle = (leaf) => __awaiter(this, void 0, void 0, function* () {
                let view = leaf.view instanceof obsidian.MarkdownView ? leaf.view : null;
                if (null === view) {
                    if (true == this.settings.ignoreOpenFiles) {
                        this.openedFiles = resetOpenedNotes(this.app);
                    }
                    return;
                }
                // if setting is true, nothing to do if this was an open note
                if (true == this.settings.ignoreOpenFiles &&
                    alreadyOpen(view.file, this.openedFiles)) {
                    this.openedFiles = resetOpenedNotes(this.app);
                    return;
                }
                // ... get frontmatter data and search for a key indicating the desired view mode
                // and when the given key is present ... set it to the declared mode
                const fileCache = this.app.metadataCache.getFileCache(view.file);
                const fileDeclaredUIMode = fileCache !== null && fileCache.frontmatter
                    ? fileCache.frontmatter[this.OBSIDIAN_UI_MODE_KEY]
                    : null;
                const fileDeclaredEditingMode = fileCache !== null && fileCache.frontmatter
                    ? fileCache.frontmatter[this.OBSIDIAN_EDITING_MODE_KEY]
                    : null;
                let state = leaf.getViewState();
                if (fileDeclaredUIMode) {
                    if (["source", "preview", "live"].includes(fileDeclaredUIMode) &&
                        view.getMode() !== fileDeclaredUIMode) {
                        state.state.mode = fileDeclaredUIMode;
                    }
                }
                if (fileDeclaredEditingMode) {
                    const shouldBeSourceMode = fileDeclaredEditingMode == 'source';
                    if (["source", "live"].includes(fileDeclaredEditingMode)) {
                        state.state.source = shouldBeSourceMode;
                    }
                }
                if (fileDeclaredUIMode || fileDeclaredEditingMode) {
                    leaf.setViewState(state);
                    if (true == this.settings.ignoreOpenFiles) {
                        this.openedFiles = resetOpenedNotes(this.app);
                    }
                    return;
                }
                const defaultViewMode = this.app.vault.config.defaultViewMode
                    ? this.app.vault.config.defaultViewMode
                    : "source";
                if (!this.settings.ignoreForceViewAll) {
                    if (view.getMode() !== defaultViewMode) {
                        let state = leaf.getViewState();
                        state.state.mode = defaultViewMode;
                        leaf.setViewState(state);
                    }
                    this.openedFiles = resetOpenedNotes(this.app);
                }
                return;
            });
            // "active-leaf-change": open note, navigate to note -> will check whether
            // the view mode needs to be set; default view mode setting is ignored.
            this.registerEvent(this.app.workspace.on("active-leaf-change", obsidian.debounce(readViewModeFromFrontmatterAndToggle, 500)));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.openedFiles = [];
        });
    }
}
function alreadyOpen(currFile, openedFiles) {
    const leavesWithSameNote = [];
    if (currFile == null) {
        return false;
    }
    openedFiles.forEach((openedFile) => {
        if (openedFile == currFile.basename) {
            leavesWithSameNote.push(openedFile);
        }
    });
    return leavesWithSameNote.length != 0;
}
function resetOpenedNotes(app) {
    let openedFiles = [];
    app.workspace.iterateAllLeaves((leaf) => {
        var _a, _b;
        let view = leaf.view instanceof obsidian.MarkdownView ? leaf.view : null;
        if (null === view) {
            return;
        }
        openedFiles.push((_b = (_a = leaf.view) === null || _a === void 0 ? void 0 : _a.file) === null || _b === void 0 ? void 0 : _b.basename);
    });
    return openedFiles;
}
class ViewModeByFrontmatterSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        new obsidian.Setting(containerEl)
            .setName("Ignore opened files")
            .setDesc("Never change the view mode on a note which was already open.")
            .addToggle((checkbox) => checkbox
            .setValue(this.plugin.settings.ignoreOpenFiles)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.ignoreOpenFiles = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Ignore force view when not in frontmatter")
            .setDesc("Never change the view mode on a note that was opened from another one in a certain view mode")
            .addToggle((checkbox) => {
            checkbox
                .setValue(this.plugin.settings.ignoreForceViewAll)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreForceViewAll = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}

module.exports = ViewModeByFrontmatterPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
