/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => CoreSearchAssistantPlugin
});

// src/Events.ts
var import_obsidian = __toModule(require("obsidian"));
var EVENT_SEARCH_RESULT_ITEM_DETECTED = "search-result-item-detected";
var EVENT_SORT_ORDER_CHANGED = "sort-order-changed";
var CoreSearchAssistantEvents = class extends import_obsidian.Events {
  trigger(name, ...data) {
    super.trigger(name, ...data);
  }
  on(name, callback, ctx) {
    return super.on(name, callback, ctx);
  }
};

// src/Controller.ts
var import_obsidian9 = __toModule(require("obsidian"));

// src/components/OptionModal.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/types/Option.ts
var searchOptions = {
  matchingCase: {
    iconId: "uppercase-lowercase-a",
    description: "Toggle matching case"
  },
  explainSearch: {
    iconId: "info",
    description: "Toggle explanation of search term"
  },
  collapseAll: {
    iconId: "bullet-list",
    description: "Toggle collapsing results"
  },
  extraContext: {
    iconId: "expand-vertically",
    description: "Toggle showing more context"
  },
  alphabetical: {
    iconId: "down-arrow-with-tail",
    description: "Sort by file name (A \u2192 Z)"
  },
  alphabeticalReverse: {
    iconId: "up-arrow-with-tail",
    description: "Sort by file name (Z \u2192 A)"
  },
  byModifiedTime: {
    iconId: "down-arrow-with-tail",
    description: "Sort by modified time (new \u2192 old)"
  },
  byModifiedTimeReverse: {
    iconId: "up-arrow-with-tail",
    description: "Sort by modified time (old \u2192 new)"
  },
  byCreatedTime: {
    iconId: "down-arrow-with-tail",
    description: "Sort by created time (new \u2192 old)"
  },
  byCreatedTimeReverse: {
    iconId: "up-arrow-with-tail",
    description: "Sort by created time (old \u2192 new)"
  }
};

// src/components/OptionModal.ts
var OptionModal = class extends import_obsidian2.Modal {
  constructor(app, plugin, modeScope) {
    super(app);
    this.plugin = plugin;
    this.modeScope = modeScope;
    this.items = [
      {
        id: "matchingCase",
        key: "a",
        onChoose: () => {
          var _a, _b, _c;
          (_a = this.plugin.searchInterface) == null ? void 0 : _a.toggleMatchingCase();
          (_b = this.plugin.searchInterface) == null ? void 0 : _b.renewSortOrderInfo();
          (_c = this.plugin.controller) == null ? void 0 : _c.reset();
        }
      },
      {
        id: "explainSearch",
        key: "s",
        onChoose: () => {
          var _a;
          (_a = this.plugin.searchInterface) == null ? void 0 : _a.toggleExplainSearch();
        }
      },
      {
        id: "collapseAll",
        key: "d",
        onChoose: () => {
          var _a;
          (_a = this.plugin.searchInterface) == null ? void 0 : _a.toggleCollapseAll();
        }
      },
      {
        id: "extraContext",
        key: "f",
        onChoose: () => {
          var _a;
          (_a = this.plugin.searchInterface) == null ? void 0 : _a.toggleExtraContext();
        }
      },
      {
        id: "alphabetical",
        key: "g",
        onChoose: () => {
          var _a, _b, _c;
          const changed = (_a = this.plugin.searchInterface) == null ? void 0 : _a.setSortOrder("alphabetical");
          if (changed) {
            (_b = this.plugin.searchInterface) == null ? void 0 : _b.renewSortOrderInfo();
            (_c = this.plugin.controller) == null ? void 0 : _c.reset();
          }
        }
      },
      {
        id: "alphabeticalReverse",
        key: "h",
        onChoose: () => {
          var _a, _b, _c;
          const changed = (_a = this.plugin.searchInterface) == null ? void 0 : _a.setSortOrder("alphabeticalReverse");
          if (changed) {
            (_b = this.plugin.searchInterface) == null ? void 0 : _b.renewSortOrderInfo();
            (_c = this.plugin.controller) == null ? void 0 : _c.reset();
          }
        }
      },
      {
        id: "byModifiedTime",
        key: "j",
        onChoose: () => {
          var _a, _b, _c;
          const changed = (_a = this.plugin.searchInterface) == null ? void 0 : _a.setSortOrder("byModifiedTime");
          if (changed) {
            (_b = this.plugin.searchInterface) == null ? void 0 : _b.renewSortOrderInfo();
            (_c = this.plugin.controller) == null ? void 0 : _c.reset();
          }
        }
      },
      {
        id: "byModifiedTimeReverse",
        key: "k",
        onChoose: () => {
          var _a, _b, _c;
          const changed = (_a = this.plugin.searchInterface) == null ? void 0 : _a.setSortOrder("byModifiedTimeReverse");
          if (changed) {
            (_b = this.plugin.searchInterface) == null ? void 0 : _b.renewSortOrderInfo();
            (_c = this.plugin.controller) == null ? void 0 : _c.reset();
          }
        }
      },
      {
        id: "byCreatedTime",
        key: "l",
        onChoose: () => {
          var _a, _b, _c;
          const changed = (_a = this.plugin.searchInterface) == null ? void 0 : _a.setSortOrder("byCreatedTime");
          if (changed) {
            (_b = this.plugin.searchInterface) == null ? void 0 : _b.renewSortOrderInfo();
            (_c = this.plugin.controller) == null ? void 0 : _c.reset();
          }
        }
      },
      {
        id: "byCreatedTimeReverse",
        key: ";",
        onChoose: () => {
          var _a, _b, _c;
          const changed = (_a = this.plugin.searchInterface) == null ? void 0 : _a.setSortOrder("byCreatedTimeReverse");
          if (changed) {
            (_b = this.plugin.searchInterface) == null ? void 0 : _b.renewSortOrderInfo();
            (_c = this.plugin.controller) == null ? void 0 : _c.reset();
          }
        }
      }
    ];
  }
  onOpen() {
    this.modeScope.push();
    this.items.forEach((item) => {
      this.scope.register([], item.key, item.onChoose);
    });
    this.renderOptions();
  }
  onClose() {
    const { containerEl } = this;
    containerEl.empty();
    setTimeout(() => this.modeScope.pop(), 100);
  }
  renderOptions() {
    const { contentEl } = this;
    contentEl.empty();
    this.containerEl.addClass("core-search-assistant_option-modal");
    this.items.forEach((item) => {
      const entryEl = contentEl.createEl("div", {
        cls: "suggestion-item"
      });
      const iconEl = entryEl.createEl("span", {
        cls: "suggestion-icon"
      });
      (0, import_obsidian2.setIcon)(iconEl, searchOptions[item.id].iconId);
      entryEl.createEl("span", {
        text: searchOptions[item.id].description,
        cls: "suggestion-content"
      });
      entryEl.createEl("kbd", {
        text: item.key.toUpperCase(),
        cls: "suggestion-hotkey"
      });
    });
  }
};

// src/Setting.ts
var import_obsidian3 = __toModule(require("obsidian"));
var AVAILABLE_OUTLINE_WIDTHS = [0, 3, 5, 7, 10];
var AUTO_PREVIEW_MODE_IDS = ["none", "singleView", "cardView"];
var autoPreviewModeInfos = {
  none: "none",
  singleView: "single view",
  cardView: "card view"
};
var AVAILABLE_CARD_LAYOUT = ["2x2", "2x3", "3x2", "3x3"];
var DEFAULT_SETTINGS = {
  keepSelectedItemsCentered: false,
  outlineWidth: 5,
  autoPreviewMode: "cardView",
  cardViewLayout: "2x3",
  splitDirection: "horizontal",
  autoToggleSidebar: false,
  renderCardsManually: false,
  hideIframe: false
};
var CoreSearchAssistantSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Keep selected item centered").addToggle((component) => {
      var _a, _b;
      component.setValue((_b = (_a = this.plugin.settings) == null ? void 0 : _a.keepSelectedItemsCentered) != null ? _b : DEFAULT_SETTINGS.keepSelectedItemsCentered).onChange((value) => {
        if (!this.plugin.settings) {
          return;
        }
        this.plugin.settings.keepSelectedItemsCentered = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Outline width (px)").setDesc("An outline appears when you enter search mode.").addDropdown((component) => {
      var _a;
      AVAILABLE_OUTLINE_WIDTHS.forEach((width) => {
        const text = width.toString();
        component.addOption(text, text);
      });
      component.setValue(validOutlineWidth((_a = this.plugin.settings) == null ? void 0 : _a.outlineWidth).toString()).onChange((value) => {
        const width = Number.parseInt(value);
        if (!this.plugin.settings) {
          return;
        }
        if (!AVAILABLE_OUTLINE_WIDTHS.includes(width)) {
          return;
        }
        this.plugin.settings.outlineWidth = width;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Auto preview mode").addDropdown((component) => {
      var _a, _b;
      component.addOptions(autoPreviewModeInfos).setValue((_b = (_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) != null ? _b : "cardView").onChange((id) => {
        if (!this.plugin.settings) {
          return;
        }
        if (!AUTO_PREVIEW_MODE_IDS.includes(id)) {
          return;
        }
        this.plugin.settings.autoPreviewMode = id;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Default layout of card view").addDropdown((component) => {
      var _a, _b;
      AVAILABLE_CARD_LAYOUT.forEach((layout) => {
        component.addOption(layout, layout);
      });
      component.setValue((_b = (_a = this.plugin.settings) == null ? void 0 : _a.cardViewLayout) != null ? _b : DEFAULT_SETTINGS.cardViewLayout).onChange((value) => {
        if (!this.plugin.settings) {
          return;
        }
        if (!AVAILABLE_CARD_LAYOUT.includes(value)) {
          return;
        }
        this.plugin.settings.cardViewLayout = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Default split direction").setDesc("This applies when you open a file in a new pane").addDropdown((component) => {
      if (!this.plugin.settings) {
        return;
      }
      component.addOptions({
        horizontal: "horizontal",
        vertical: "vertical"
      }).setValue(this.plugin.settings.splitDirection).onChange((direction) => __async(this, null, function* () {
        if (!this.plugin.settings) {
          return;
        }
        if (direction == "horizontal" || direction == "vertical") {
          this.plugin.settings.splitDirection = direction;
          yield this.plugin.saveSettings();
        }
      }));
    });
    new import_obsidian3.Setting(containerEl).setName("Toggle sidebars automatically").setDesc("Automatically collapse the other sidebar when entering the search mode and the search panel when exiting the search mode").addToggle((component) => {
      if (!this.plugin.settings) {
        return;
      }
      component.setValue(this.plugin.settings.autoToggleSidebar).onChange((value) => {
        if (!this.plugin.settings) {
          return;
        }
        this.plugin.settings.autoToggleSidebar = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Render cards manually").setDesc("If enabled, you must hit the enter key to render cards.").addToggle((component) => {
      if (!this.plugin.settings)
        return;
      component.setValue(this.plugin.settings.renderCardsManually).onChange((value) => {
        if (!this.plugin.settings)
          return;
        this.plugin.settings.renderCardsManually = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Hide iframe from auto preview").setDesc("Some iframe elements prevent the keyboard operation.").addToggle((component) => {
      if (!this.plugin.settings) {
        return;
      }
      component.setValue(this.plugin.settings.hideIframe).onChange((value) => {
        if (!this.plugin.settings) {
          return;
        }
        this.plugin.settings.hideIframe = value;
        this.plugin.saveSettings();
      });
    });
  }
};
function validOutlineWidth(width) {
  if (typeof width !== "number") {
    return DEFAULT_SETTINGS.outlineWidth;
  }
  if (!Number.isInteger(width)) {
    return DEFAULT_SETTINGS.outlineWidth;
  }
  if (!AVAILABLE_OUTLINE_WIDTHS.includes(width)) {
    return DEFAULT_SETTINGS.outlineWidth;
  }
  return width;
}
function parseCardLayout(layout) {
  const [row, column] = layout.split("x");
  return [Number.parseInt(row != null ? row : "0"), Number.parseInt(column != null ? column : "0")];
}

// src/components/PreviewModal.ts
var import_obsidian6 = __toModule(require("obsidian"));

// src/interfaces/ViewGenerator.ts
var import_obsidian4 = __toModule(require("obsidian"));

// src/utils/Util.ts
function delay(millisecond) {
  return __async(this, null, function* () {
    yield new Promise((resolve) => setTimeout(resolve, millisecond));
  });
}
function scrollIteration(editor) {
  const line = lineCount(editor);
  if (line === void 0) {
    return void 0;
  }
  return Math.max(Math.floor(line / 1e3), 1);
}
function lineCount(editor) {
  var _a, _b, _c;
  const line = (_c = (_b = (_a = editor == null ? void 0 : editor["cm"]) == null ? void 0 : _a["state"]) == null ? void 0 : _b["doc"]) == null ? void 0 : _c.length;
  return typeof line === "number" ? line : void 0;
}
function retry(cb, interval, trials, check = (got) => got !== void 0) {
  return __async(this, null, function* () {
    for (let i = 0; i < trials; i++) {
      const got = cb();
      if (check(got)) {
        return got;
      }
      yield delay(interval);
    }
    return void 0;
  });
}

// src/interfaces/ViewGenerator.ts
var ViewGenerator = class {
  constructor(app, containerEl, file) {
    this.app = app;
    this.containerEl = containerEl;
    this.leaf = new import_obsidian4.WorkspaceLeaf(this.app);
    this.file = file;
    this.containerEl.appendChild(this.leaf.containerEl);
  }
  load(mode) {
    return __async(this, null, function* () {
      yield this.onload(mode);
      return this;
    });
  }
  unload() {
    return __async(this, null, function* () {
      this.onunload();
    });
  }
  togglePreview() {
    return __async(this, null, function* () {
      yield this.setViewMode("preview");
    });
  }
  toggleSource() {
    return __async(this, null, function* () {
      yield this.setViewMode("source");
    });
  }
  toggleViewMode() {
    return __async(this, null, function* () {
      const view = this.leaf.view;
      if (!(view instanceof import_obsidian4.MarkdownView)) {
        throw "[ERROR in Core Search Assistant] failed to toggle view mode: view is not an instance of MarkdownView";
      }
      if (view.getMode() === "preview") {
        yield this.toggleSource();
      } else {
        yield this.togglePreview();
      }
    });
  }
  onload(mode) {
    return __async(this, null, function* () {
      yield this.openFile(mode != null ? mode : "preview");
    });
  }
  onunload() {
    this.leaf.detach();
  }
  openFile(mode) {
    return __async(this, null, function* () {
      const { leaf, file } = this;
      yield leaf.openFile(file, { state: { mode } });
    });
  }
  setViewMode(mode) {
    return __async(this, null, function* () {
      yield this.leaf.view.setState(__spreadProps(__spreadValues({}, this.leaf.view.getState()), {
        mode
      }), {});
    });
  }
  highlightMatches(matches) {
    const view = this.leaf.view;
    if (!(view instanceof import_obsidian4.MarkdownView)) {
      throw "[ERROR in Core Search Assistant] failed to highlight matches: view is not an instance of MarkdownView";
    }
    const editor = view.editor;
    const ranges = [];
    matches.forEach((match) => {
      const range = {
        from: editor.offsetToPos(match[0]),
        to: editor.offsetToPos(match[1])
      };
      ranges.push(range);
    });
    editor.addHighlights(ranges, "highlight-search-match");
  }
  scrollIntoView(match, center) {
    return __async(this, null, function* () {
      const view = this.leaf.view;
      if (!(view instanceof import_obsidian4.MarkdownView)) {
        throw "[ERROR in Core Search Assistant] failed to scroll into view: view is not an instance of MarkdownView";
      }
      if (view.getMode() !== "source") {
        return;
      }
      const editor = view.editor;
      const range = {
        from: editor.offsetToPos(match[0]),
        to: editor.offsetToPos(match[1])
      };
      const iter = scrollIteration(editor);
      if (iter === void 0) {
        return;
      }
      for (let i = 0; i < iter; i++) {
        editor.scrollIntoView(range, center);
        yield delay(1);
      }
    });
  }
  focusOn(match, center) {
    return __async(this, null, function* () {
      const view = this.leaf.view;
      if (!(view instanceof import_obsidian4.MarkdownView)) {
        throw "[ERROR in Core Search Assistant] failed to focusOn: view is not an instance of MarkdownView";
      }
      if (view.getMode() !== "source") {
        return;
      }
      yield this.scrollIntoView(match, center);
      const { editor } = view;
      editor.removeHighlights("focus-search-match");
      const range = {
        from: editor.offsetToPos(match[0]),
        to: editor.offsetToPos(match[1])
      };
      editor.addHighlights([range], "focus-search-match");
    });
  }
  oppositeMode(mode) {
    return mode === "preview" ? "source" : "preview";
  }
};

// src/components/WorkspacePreview.ts
var import_obsidian5 = __toModule(require("obsidian"));
var INTERVAL_MILLISECOND_TO_BE_DETACHED = 1e3;
var WorkspacePreview = class extends import_obsidian5.Component {
  constructor(app, plugin) {
    super();
    this.app = app;
    this.plugin = plugin;
    this.containerEl = this.createContainerEl();
  }
  onload() {
    this.hide();
    this.app.workspace.onLayoutReady(() => {
      this.app.workspace.rootSplit.containerEl.appendChild(this.containerEl);
    });
  }
  onunload() {
    var _a;
    (_a = this.renderer) == null ? void 0 : _a.unload();
    this.containerEl.empty();
    this.containerEl.remove();
  }
  renew(item) {
    this.requestUnloadRenderer(INTERVAL_MILLISECOND_TO_BE_DETACHED);
    this.show(item);
  }
  hide() {
    this.containerEl.hide();
    this.requestUnloadRenderer(INTERVAL_MILLISECOND_TO_BE_DETACHED);
  }
  createContainerEl() {
    return createEl("div", {
      attr: {
        id: "core-search-assistant_workspace-preview"
      }
    });
  }
  requestUnloadRenderer(millisecond) {
    const { renderer } = this;
    this.renderer = void 0;
    setTimeout(() => {
      renderer == null ? void 0 : renderer.unload();
    }, millisecond);
  }
  show(item) {
    return __async(this, null, function* () {
      const { containerEl } = this;
      containerEl.empty();
      this.renderer = yield new ViewGenerator(this.app, containerEl, item.file).load("preview");
      containerEl.show();
    });
  }
};

// src/components/PreviewModal.ts
var SCROLL_AMOUNT = 70;
var TOGGLE_PREVIEW_COMMAND_ID = "markdown:toggle-preview";
var PreviewModal = class extends import_obsidian6.Modal {
  constructor(app, plugin, modeScope, item) {
    super(app);
    this.plugin = plugin;
    this.modeScope = modeScope;
    this.item = item;
    this.currentFocus = -1;
  }
  onOpen() {
    return __async(this, null, function* () {
      var _a, _b;
      yield this.renderView();
      (_b = this.renderer) == null ? void 0 : _b.highlightMatches((_a = this.item.result.content) != null ? _a : []);
      this.modeScope.push();
      this.scope.register(["Ctrl"], " ", () => {
        this.shouldRestoreSelection = true;
        this.close();
      });
      this.scope.register(["Ctrl"], "Enter", () => {
        var _a2;
        this.openAndFocus(this.currentFocus);
        (_a2 = this.plugin.controller) == null ? void 0 : _a2.exit();
        this.shouldRestoreSelection = false;
        this.close();
      });
      this.scope.register(["Ctrl", "Shift"], "Enter", () => {
        var _a2, _b2;
        this.openAndFocus(this.currentFocus, (_a2 = this.plugin.settings) == null ? void 0 : _a2.splitDirection);
        (_b2 = this.plugin.controller) == null ? void 0 : _b2.exit();
        this.shouldRestoreSelection = false;
        this.close();
      });
      this.scope.register([], " ", () => {
        this.scroll("down");
      });
      this.scope.register(["Shift"], " ", () => {
        this.scroll("up");
      });
      this.scope.register([], "ArrowDown", () => {
        this.scroll("down", SCROLL_AMOUNT);
      });
      this.scope.register(["Ctrl"], "n", () => {
        this.scroll("down", SCROLL_AMOUNT);
      });
      this.scope.register([], "ArrowUp", () => {
        this.scroll("up", SCROLL_AMOUNT);
      });
      this.scope.register(["Ctrl"], "p", () => {
        this.scroll("up", SCROLL_AMOUNT);
      });
      this.scope.register([], "Tab", (evt) => {
        evt.preventDefault();
        const numMatches = this.countMatches();
        if (numMatches === void 0 || numMatches === 0) {
          return;
        }
        this.currentFocus = cyclicId(++this.currentFocus, numMatches);
        this.focusOn(this.currentFocus, true);
      });
      this.scope.register(["Shift"], "Tab", (evt) => {
        evt.preventDefault();
        const numMatches = this.countMatches();
        if (numMatches === void 0 || numMatches === 0) {
          return;
        }
        this.currentFocus = cyclicId(--this.currentFocus, numMatches);
        this.focusOn(this.currentFocus, true);
      });
      const togglePreviewHotkeys = this.getHotkeys(TOGGLE_PREVIEW_COMMAND_ID);
      togglePreviewHotkeys.forEach((hotkey) => {
        this.scope.register(hotkey.modifiers, hotkey.key, (evt) => {
          evt.preventDefault();
          this.toggleViewMode();
        });
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.requestUnloadRenderer(INTERVAL_MILLISECOND_TO_BE_DETACHED);
    setTimeout(() => {
      if (this.modeScope.depth > 1) {
        this.modeScope.pop();
      }
    }, 100);
  }
  requestUnloadRenderer(millisecond) {
    const renderer = this.renderer;
    this.renderer = void 0;
    setTimeout(() => {
      renderer == null ? void 0 : renderer.unload();
    }, millisecond);
  }
  renderView() {
    return __async(this, null, function* () {
      const { contentEl, containerEl, item } = this;
      contentEl.empty();
      contentEl.hide();
      if (this.app.vault.config.legacyEditor) {
        containerEl.addClass("core-search-assistant_preview-modal-container_legacy");
      } else {
        containerEl.addClass("core-search-assistant_preview-modal-container");
      }
      this.renderer = yield new ViewGenerator(this.app, contentEl, item.file).load("source");
      contentEl.show();
    });
  }
  countMatches() {
    var _a;
    return (_a = this.item.result.content) == null ? void 0 : _a.length;
  }
  toggleViewMode() {
    var _a;
    (_a = this.renderer) == null ? void 0 : _a.toggleViewMode();
  }
  scroll(direction, px) {
    const { containerEl, contentEl } = this;
    const move = (px != null ? px : containerEl.clientHeight / 2) * (direction === "up" ? -1 : 1);
    contentEl.scrollBy({
      top: move,
      behavior: "smooth"
    });
  }
  focusOn(matchId, center) {
    var _a;
    const { renderer, item } = this;
    const match = (_a = item.result.content) == null ? void 0 : _a[matchId];
    if (match === void 0) {
      return;
    }
    renderer == null ? void 0 : renderer.focusOn(match, center);
  }
  openAndFocus(matchId, direction) {
    return __async(this, null, function* () {
      var _a, _b;
      const { item } = this;
      const leaf = direction === void 0 ? this.app.workspace.getMostRecentLeaf() : this.app.workspace.splitActiveLeaf(direction);
      yield leaf.openFile(item.file, {
        state: {
          mode: "source"
        }
      });
      this.app.workspace.setActiveLeaf(leaf, true, true);
      const match = (_b = (_a = item == null ? void 0 : item.result) == null ? void 0 : _a.content) == null ? void 0 : _b[matchId];
      if (!match) {
        return;
      }
      const { view } = leaf;
      if (!(view instanceof import_obsidian6.MarkdownView)) {
        throw "[ERROR in Core Search Assistant] failed to openAndFocus: view is not an instance of MarkdownView";
      }
      const editor = view.modes.source.editor;
      const range = {
        from: editor.offsetToPos(match[0]),
        to: editor.offsetToPos(match[1])
      };
      editor.addHighlights([range], "obsidian-search-match-highlight");
      const iter = scrollIteration(editor);
      if (iter === void 0) {
        return;
      }
      for (let i = 0; i < iter; i++) {
        editor.scrollIntoView(range, true);
      }
      editor.setCursor(range.from);
    });
  }
  getHotkeys(commandId) {
    const { hotkeyManager } = this.app;
    const customKeys = hotkeyManager.customKeys[commandId];
    if (customKeys !== void 0 && customKeys.length !== 0) {
      return customKeys;
    }
    const defaultKeys = hotkeyManager.defaultKeys[commandId];
    if (defaultKeys !== void 0 && defaultKeys.length !== 0) {
      return defaultKeys;
    }
    throw `getHotkey failed: command id ${commandId} is invalid`;
  }
};
function cyclicId(id, total) {
  return (id % total + total) % total;
}

// src/components/Outline.ts
var import_obsidian7 = __toModule(require("obsidian"));
var Outline = class extends import_obsidian7.Component {
  constructor(lineWidth) {
    super();
    this.outlineEl = document.body.createEl("div", {
      cls: "core-search-assistant_search-mode-outline"
    });
    this.lineWidth = lineWidth;
  }
  onload() {
    this.setWidth(this.lineWidth);
  }
  onunload() {
    this.outlineEl.remove();
  }
  setWidth(lineWidth) {
    this.outlineEl.style.outline = `${lineWidth}px solid var(--interactive-accent)`;
    this.outlineEl.style.outlineOffset = `-${lineWidth}px`;
    this.outlineEl.show();
  }
};

// src/components/CardView.ts
var import_obsidian8 = __toModule(require("obsidian"));
var CardView = class extends import_obsidian8.Component {
  constructor(app, plugin) {
    super();
    this.app = app;
    this.plugin = plugin;
    this.containerEl = this.createContainerEl();
    this.contentEl = this.createContentEl();
    this.renderers = [];
  }
  onload() {
    this.registerDomEvent(this.contentEl, "click", this.onCardItemClicked);
    this.attachContainerEl();
  }
  onunload() {
    this.requestUnloadRenderers();
    this.containerEl.empty();
    this.containerEl.remove();
  }
  renderItem(item, id) {
    this.renderItemByViewGenerator(item, id);
  }
  focusOn(pos) {
    const { contentEl } = this;
    const cardEls = contentEl.childNodes;
    [-1, 0, 1].forEach((i) => {
      const el = cardEls.item(pos + i);
      if (!(el instanceof HTMLElement)) {
        return;
      }
      if (i === 0) {
        el.addClass("is-selected");
      } else {
        el.removeClass("is-selected");
      }
    });
  }
  unfocus() {
    const { contentEl } = this;
    const cardEls = contentEl.childNodes;
    cardEls.forEach((el) => {
      if (!(el instanceof HTMLElement)) {
        return;
      }
      el.removeClass("is-selected");
    });
  }
  clear() {
    this.requestUnloadRenderers();
    this.containerEl.hide();
    this.contentEl.empty();
  }
  renderPage(itemId) {
    var _a;
    const cardsPerPage = this.cardsPerPage();
    if (cardsPerPage === void 0) {
      return;
    }
    const pageId = Math.floor(itemId / cardsPerPage);
    const items = (_a = this.plugin.searchInterface) == null ? void 0 : _a.resultItems;
    if (!items) {
      return;
    }
    for (let i = pageId * cardsPerPage; i < (pageId + 1) * cardsPerPage; i++) {
      const item = items[i];
      if (!item) {
        continue;
      }
      this.renderItem(item, i);
    }
    this.setLayout();
  }
  reveal() {
    this.containerEl.show();
  }
  setLayout() {
    if (!this.plugin.settings) {
      return;
    }
    const [row, column] = parseCardLayout(this.plugin.settings.cardViewLayout);
    this.contentEl.style.gridTemplateColumns = `repeat(${column}, minmax(0, 1fr))`;
    this.contentEl.style.gridTemplateRows = `repeat(${row}, 1fr)`;
  }
  get itemsRenderedCorrectly() {
    var _a;
    const wantedItems = (_a = this.plugin.searchInterface) == null ? void 0 : _a.resultItems;
    if (wantedItems === void 0) {
      return false;
    }
    const cardsPerPage = this.cardsPerPage();
    if (cardsPerPage === void 0) {
      return false;
    }
    const length = Math.min(wantedItems.length, cardsPerPage);
    const gotItemEls = this.contentEl.children;
    for (let i = 0; i < length; i++) {
      const want = wantedItems[i];
      const got = gotItemEls.item(i);
      if (want === void 0) {
        if (got === null) {
          continue;
        } else {
          return false;
        }
      }
      if (!(got instanceof HTMLElement)) {
        return false;
      }
      if (got.dataset["path"] !== want.file.path) {
        return false;
      }
    }
    return true;
  }
  createContainerEl() {
    const containerEl = createEl("div", {
      attr: { id: `core-search-assistant_card-view` }
    });
    return containerEl;
  }
  attachContainerEl() {
    this.app.workspace.onLayoutReady(() => {
      this.app.workspace.rootSplit.containerEl.appendChild(this.containerEl);
      this.containerEl.hide();
    });
  }
  createContentEl() {
    let row = 0;
    let column = 0;
    if (this.plugin.settings) {
      [row, column] = parseCardLayout(this.plugin.settings.cardViewLayout);
    }
    const contentEl = this.containerEl.createEl("div", {
      cls: "content"
    });
    contentEl.style.gridTemplateColumns = `repeat(${column}, minmax(0, 1fr))`;
    contentEl.style.gridTemplateRows = `repeat(${row}, 1fr)`;
    return contentEl;
  }
  renderItemByViewGenerator(item, id) {
    return __async(this, null, function* () {
      const previewContainerEl = this.createPreviewContainerEl(item, id);
      previewContainerEl.empty();
      if (supportedFileTypes.includes(item.file.extension)) {
        const renderer = yield new ViewGenerator(this.app, previewContainerEl, item.file).load("preview");
        renderer.togglePreview();
        this.renderers.push(renderer);
      } else {
        previewContainerEl.createDiv({
          text: `${item.file.extension} file`,
          cls: "unsupported-file-content"
        });
      }
    });
  }
  requestUnloadRenderers() {
    const renderersToUnload = this.renderers;
    this.renderers = [];
    setTimeout(() => {
      renderersToUnload.forEach((renderer) => {
        renderer.unload();
      });
    }, INTERVAL_MILLISECOND_TO_BE_DETACHED);
  }
  createPreviewContainerEl(item, id) {
    var _a;
    const { contentEl } = this;
    const itemContainerEl = contentEl.createEl("div", {
      cls: "item-container",
      attr: {
        "data-id": id,
        "data-path": item.file.path
      }
    });
    itemContainerEl.createEl("div", {
      cls: "file-name-container",
      text: item.file.extension === "md" ? item.file.basename : item.file.name
    });
    const previewMarginEl = itemContainerEl.createEl("div", {
      cls: "preview-container-wrapper"
    });
    const previewContainerEl = previewMarginEl.createEl("div", {
      cls: "preview-container"
    });
    if ((_a = this.plugin.settings) == null ? void 0 : _a.hideIframe) {
      previewContainerEl.addClass("hide-iframe");
    }
    return previewContainerEl;
  }
  getSelectedCardEl(el) {
    const parentEl = el.parentElement;
    if (el.tagName === "DIV" && parentEl === this.contentEl) {
      return el;
    }
    if (parentEl === null) {
      return void 0;
    }
    return this.getSelectedCardEl(parentEl);
  }
  cardsPerPage() {
    if (!this.plugin.settings) {
      return void 0;
    }
    const [row, column] = parseCardLayout(this.plugin.settings.cardViewLayout);
    return row * column;
  }
  get onCardItemClicked() {
    return (evt) => {
      var _a;
      if (!(evt.target instanceof HTMLElement)) {
        return;
      }
      const cardEl = this.getSelectedCardEl(evt.target);
      if (!cardEl) {
        return;
      }
      const id = cardEl.dataset["id"];
      if (id === void 0) {
        return;
      }
      (_a = this.plugin.searchInterface) == null ? void 0 : _a.open(Number.parseInt(id));
    };
  }
};
var supportedFileTypes = [
  "md",
  "png",
  "jpg",
  "jpeg",
  "gif",
  "bmp",
  "svg",
  "mp3",
  "webm",
  "wav",
  "m4a",
  "ogg",
  "3gp",
  "flac",
  "mp4",
  "ogv",
  "pdf"
];

// src/ModeScope.ts
var ModeScope = class {
  constructor() {
    this._depth = 0;
  }
  get inSearchMode() {
    return this._depth > 0;
  }
  get depth() {
    return this._depth;
  }
  push() {
    this._depth++;
  }
  pop() {
    this._depth--;
    if (this.depth < 0) {
      throw "[ERROR in Core Search Assistant] ModeScope.depth < 0";
    }
  }
  reset() {
    this._depth = 0;
  }
};

// src/Controller.ts
var DELAY_TO_RELOAD_IN_MILLISECOND = 1e3;
var RETRY_INTERVAL = 1;
var RETRY_TRIALS = 1e3;
var DELAY_TO_RENDER_CARD_VIEW_ON_ENTRY_IN_MILLISECOND = 100;
var Controller = class extends import_obsidian9.Component {
  constructor(app, plugin, events, searchInterface) {
    super();
    this.app = app;
    this.plugin = plugin;
    this.events = events;
    this.searchInterface = searchInterface;
    this.modeScope = new ModeScope();
    this.countSearchItemDetected = 0;
  }
  onunload() {
    this.exit();
  }
  onload() {
    this.saveLayout();
    this.setSearchModeTriggers();
  }
  enter() {
    return __async(this, null, function* () {
      var _a, _b;
      if (this.modeScope.inSearchMode) {
        return;
      }
      this.setHotkeys();
      this.addChildren();
      if ((_a = this.plugin.settings) == null ? void 0 : _a.autoToggleSidebar) {
        this.collapseOppositeSidedock();
      }
      const shouldDetectSearchItems = ((_b = this.plugin.settings) == null ? void 0 : _b.autoPreviewMode) === "cardView" && this.plugin.settings.renderCardsManually === false;
      if (shouldDetectSearchItems) {
        this.searchInterface.startWatching(this.events);
        yield delay(DELAY_TO_RENDER_CARD_VIEW_ON_ENTRY_IN_MILLISECOND);
        this.renewCardViewPage();
      }
      this.modeScope.push();
    });
  }
  reset() {
    var _a;
    if (!this.modeScope.inSearchMode) {
      return;
    }
    this.forget();
    this.unfocus();
    (_a = this.cardView) == null ? void 0 : _a.clear();
    this.countSearchItemDetected = 0;
  }
  exit(reason) {
    var _a;
    if (!this.modeScope.inSearchMode) {
      return;
    }
    this.reset();
    this.detachHotkeys();
    this.removeChildren();
    if (this.shouldCollapseSidedock(reason)) {
      this.collapseSidedock();
    }
    if ((_a = this.plugin.settings) == null ? void 0 : _a.autoToggleSidebar) {
      this.restoreOppositeSidedock();
    }
    this.countSearchItemDetected = 0;
    this.searchInterface.stopWatching();
    this.unfocus();
    this.modeScope.reset();
  }
  focus() {
    var _a;
    if (this.currentFocusId === void 0) {
      return;
    }
    this.searchInterface.focusOn(this.currentFocusId);
    const pos = this.positionInCardView(this.currentFocusId);
    if (pos === void 0) {
      return;
    }
    (_a = this.cardView) == null ? void 0 : _a.focusOn(pos);
  }
  open(direction) {
    if (this.currentFocusId === void 0) {
      return;
    }
    this.searchInterface.open(this.currentFocusId, direction);
  }
  renewCardViewPage() {
    var _a, _b, _c, _d, _e;
    if (((_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) !== "cardView") {
      return;
    }
    (_b = this.cardView) == null ? void 0 : _b.clear();
    (_d = this.cardView) == null ? void 0 : _d.renderPage((_c = this.currentFocusId) != null ? _c : 0);
    (_e = this.cardView) == null ? void 0 : _e.reveal();
  }
  collapseSidedock() {
    var _a;
    (_a = this.plugin.searchInterface) == null ? void 0 : _a.collapseSidedock();
  }
  collapseOppositeSidedock() {
    var _a, _b, _c;
    const collapsed = (_b = (_a = this.plugin.searchInterface) == null ? void 0 : _a.oppositeSidedock) == null ? void 0 : _b.collapsed;
    (_c = this.plugin.searchInterface) == null ? void 0 : _c.collapseOppositeSidedock();
    this._restoreOppositeSidedock = () => {
      var _a2;
      if (collapsed === false) {
        (_a2 = this.plugin.searchInterface) == null ? void 0 : _a2.expandOppositeSidedock();
      }
    };
  }
  restoreOppositeSidedock() {
    const restoreOppositeSidedock = this._restoreOppositeSidedock;
    if (restoreOppositeSidedock === void 0) {
      return void 0;
    }
    return restoreOppositeSidedock();
  }
  addChildren() {
    this.removeChildren();
    if (this.plugin.settings === void 0) {
      throw "[ERROR in Core Search Assistant] failed to addChildren: failed to read setting";
    }
    this.outline = this.addChild(new Outline(this.plugin.settings.outlineWidth));
    this.cardView = this.addChild(new CardView(this.app, this.plugin));
    this.workspacePreview = this.addChild(new WorkspacePreview(this.app, this.plugin));
  }
  removeChildren() {
    if (this.outline) {
      this.removeChild(this.outline);
    }
    if (this.cardView) {
      this.removeChild(this.cardView);
    }
    if (this.workspacePreview) {
      this.removeChild(this.workspacePreview);
    }
  }
  forget() {
    this.currentFocusId = void 0;
    this.countSearchItemDetected = 0;
  }
  showCardViewItem(id) {
    var _a, _b, _c;
    const item = this.searchInterface.getResultItemAt(id);
    if (!item) {
      return;
    }
    (_a = this.cardView) == null ? void 0 : _a.renderItem(item, id);
    (_b = this.cardView) == null ? void 0 : _b.setLayout();
    (_c = this.cardView) == null ? void 0 : _c.reveal();
  }
  showWorkspacePreview() {
    var _a, _b, _c;
    if (((_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) !== "singleView") {
      return;
    }
    const item = this.searchInterface.getResultItemAt((_b = this.currentFocusId) != null ? _b : 0);
    if (!item) {
      return;
    }
    (_c = this.workspacePreview) == null ? void 0 : _c.renew(item);
  }
  navigateForward() {
    var _a;
    if (this.currentFocusId === void 0) {
      this.currentFocusId = 0;
    } else {
      const numResults = (_a = this.searchInterface.count()) != null ? _a : 0;
      this.currentFocusId++;
      this.currentFocusId = this.currentFocusId < numResults ? this.currentFocusId : numResults - 1;
      if (this.shouldTransitNextPageInCardView()) {
        this.renewCardViewPage();
      }
    }
    this.focus();
  }
  navigateBack() {
    if (this.currentFocusId === void 0) {
      return;
    }
    this.currentFocusId--;
    this.currentFocusId = this.currentFocusId >= 0 ? this.currentFocusId : 0;
    if (this.shouldTransitPreviousPageInCardView()) {
      this.renewCardViewPage();
    }
    this.focus();
  }
  moveToNextPage() {
    const pageId = this.pageId;
    if (pageId === void 0)
      return;
    const pageCount = this.pageCount;
    if (pageCount === void 0)
      return;
    if (pageId >= pageCount - 1)
      return;
    const cardsPerPage = this.cardsPerPage();
    if (cardsPerPage === void 0)
      return;
    this.currentFocusId = cardsPerPage * (pageId + 1);
    this.renewCardViewPage();
    this.focus();
  }
  moveToPreviousPage() {
    const pageId = this.pageId;
    if (pageId === void 0)
      return;
    const pageCount = this.pageCount;
    if (pageCount === void 0)
      return;
    if (pageId <= 0)
      return;
    const cardsPerPage = this.cardsPerPage();
    if (cardsPerPage === void 0)
      return;
    this.currentFocusId = cardsPerPage * (pageId - 1);
    this.renewCardViewPage();
    this.focus();
  }
  unfocus() {
    var _a;
    this.searchInterface.unfocus();
    (_a = this.cardView) == null ? void 0 : _a.unfocus();
  }
  openPreviewModal() {
    const { currentFocusId } = this;
    if (currentFocusId === void 0) {
      return;
    }
    const item = this.searchInterface.getResultItemAt(currentFocusId);
    if (!item) {
      return;
    }
    if (item.file.extension === "md") {
      new PreviewModal(this.app, this.plugin, this.modeScope, item).open();
    }
  }
  shouldTransitNextPageInCardView() {
    if (!this.plugin.settings) {
      return false;
    }
    const [row, column] = parseCardLayout(this.plugin.settings.cardViewLayout);
    const cardsPerPage = row * column;
    if (this.currentFocusId === void 0) {
      return false;
    }
    return this.currentFocusId % cardsPerPage === 0;
  }
  shouldTransitPreviousPageInCardView() {
    if (!this.plugin.settings) {
      return false;
    }
    const [row, column] = parseCardLayout(this.plugin.settings.cardViewLayout);
    const cardsPerPage = row * column;
    if (this.currentFocusId === void 0) {
      return false;
    }
    return (this.currentFocusId + 1) % cardsPerPage === 0;
  }
  positionInCardView(id) {
    if (id === void 0) {
      return void 0;
    }
    const cardsPerPage = this.cardsPerPage();
    if (!cardsPerPage) {
      return void 0;
    }
    return id % cardsPerPage;
  }
  get pageId() {
    if (this.currentFocusId === void 0)
      return void 0;
    const cardsPerPage = this.cardsPerPage();
    if (cardsPerPage === void 0)
      return void 0;
    const pageId = Math.floor(this.currentFocusId / cardsPerPage);
    return pageId;
  }
  get pageCount() {
    var _a;
    const numResults = (_a = this.plugin.searchInterface) == null ? void 0 : _a.count();
    const cardsPerPage = this.cardsPerPage();
    if (cardsPerPage === void 0)
      return void 0;
    const pageCount = Math.ceil((numResults != null ? numResults : 0) / cardsPerPage);
    return pageCount;
  }
  cardsPerPage() {
    if (!this.plugin.settings) {
      return void 0;
    }
    const [row, column] = parseCardLayout(this.plugin.settings.cardViewLayout);
    return row * column;
  }
  retryCardView(delayMillisecond) {
    setTimeout(() => {
      var _a;
      if (!((_a = this.cardView) == null ? void 0 : _a.itemsRenderedCorrectly)) {
        this.reset();
        this.renewCardViewPage();
      }
    }, delayMillisecond);
  }
  saveLayout() {
    this.app.workspace.onLayoutReady(() => __async(this, null, function* () {
      const inputEl = yield retry(() => this.searchInterface.searchInputEl, RETRY_INTERVAL, RETRY_TRIALS);
      this._layoutChanged = () => __async(this, null, function* () {
        return inputEl !== (yield retry(() => this.searchInterface.searchInputEl, RETRY_INTERVAL, RETRY_TRIALS));
      });
    }));
  }
  layoutChanged() {
    return __async(this, null, function* () {
      var _a;
      const required = yield (_a = this._layoutChanged) == null ? void 0 : _a.call(this);
      if (required === void 0) {
        throw "[ERROR in Core Search Assistant] failed to renewRequired: saveLayout was not called.";
      }
      return required;
    });
  }
  setSearchModeTriggers() {
    this.registerEvent(this.events.on(EVENT_SEARCH_RESULT_ITEM_DETECTED, this.onSearchResultItemDetected));
    this.registerEvent(this.events.on(EVENT_SORT_ORDER_CHANGED, this.onSortOrderChanged));
    this.app.workspace.onLayoutReady(() => __async(this, null, function* () {
      const appContainerEl = yield retry(() => this.app.dom.appContainerEl, RETRY_INTERVAL, RETRY_TRIALS);
      if (appContainerEl === void 0) {
        throw "[ERROR in Core Search Assistant] failed to find the app container element";
      }
      const inputEl = yield retry(() => {
        var _a;
        return (_a = this.plugin.searchInterface) == null ? void 0 : _a.searchInputEl;
      }, RETRY_INTERVAL, RETRY_TRIALS);
      if (inputEl === void 0) {
        throw "[ERROR in Core Search Assistant] failed to find the search input form.";
      }
      const matchingCaseButtonEl = yield retry(() => {
        var _a;
        return (_a = this.plugin.searchInterface) == null ? void 0 : _a.matchingCaseButtonEl;
      }, RETRY_INTERVAL, RETRY_TRIALS);
      if (matchingCaseButtonEl === void 0) {
        throw "[ERROR in Core Search Assistant] failed to find the matching case button.";
      }
      this.registerDomEvent(appContainerEl, "click", (evt) => {
        var _a, _b, _c, _d, _e;
        const targetEl = evt.target;
        if (!(targetEl instanceof HTMLElement)) {
          return;
        }
        if ((_b = (_a = this.plugin.searchInterface) == null ? void 0 : _a.searchLeaf) == null ? void 0 : _b.containerEl.contains(targetEl)) {
          if (!this.plugin.searchInterface.isBuiltInElementToOpenFile(targetEl))
            return;
        }
        if ((_d = (_c = this.plugin.searchInterface) == null ? void 0 : _c.tabHeaderEl) == null ? void 0 : _d.contains(targetEl)) {
          return;
        }
        if ((_e = this.plugin.searchInterface) == null ? void 0 : _e.isShowMoreContextButton(targetEl)) {
          return;
        }
        if (this.modeScope.depth === 1) {
          this.exit({ id: "mouse", event: evt });
        }
      });
      this.registerDomEvent(matchingCaseButtonEl, "click", () => {
        if (this.modeScope.inSearchMode) {
          this.reset();
        }
      });
      this.registerDomEvent(inputEl, "click", () => {
        if (!this.modeScope.inSearchMode) {
          this.enter();
        }
      });
      this.registerDomEvent(inputEl, "input", () => {
        if (!this.modeScope.inSearchMode) {
          this.enter();
        }
        this.reset();
      });
      this.registerDomEvent(inputEl, "keypress", (evt) => {
        if (evt.key !== "Enter") {
          return;
        }
        if (!this.modeScope.inSearchMode) {
          this.enter();
        }
        this.reset();
      });
      this.registerDomEvent(inputEl, "focus", () => {
        if (!this.modeScope.inSearchMode) {
          this.enter();
        }
      });
    }));
  }
  setHotkeys() {
    const scope = new import_obsidian9.Scope();
    this.app.keymap.pushScope(scope);
    scope.register(["Ctrl"], "N", (evt) => {
      evt.preventDefault();
      this.navigateForward();
      this.showWorkspacePreview();
    });
    scope.register([], "ArrowDown", (evt) => {
      evt.preventDefault();
      this.navigateForward();
      this.showWorkspacePreview();
    });
    scope.register(["Ctrl"], "P", (evt) => {
      evt.preventDefault();
      this.navigateBack();
      this.showWorkspacePreview();
    });
    scope.register([], "ArrowUp", (evt) => {
      evt.preventDefault();
      this.navigateBack();
      this.showWorkspacePreview();
    });
    scope.register(["Ctrl"], "Enter", (evt) => {
      evt.preventDefault();
      this.open();
      this.exit();
    });
    scope.register(["Ctrl", "Shift"], "Enter", (evt) => {
      var _a;
      evt.preventDefault();
      this.open((_a = this.plugin.settings) == null ? void 0 : _a.splitDirection);
      this.exit();
    });
    scope.register(["Ctrl"], " ", () => {
      if (this.app.vault.config.legacyEditor) {
        return;
      }
      this.openPreviewModal();
    });
    scope.register(["Shift"], " ", () => {
      new OptionModal(this.app, this.plugin, this.modeScope).open();
    });
    scope.register(["Ctrl"], "]", () => {
      var _a;
      if (((_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) === "cardView") {
        this.moveToNextPage();
      }
    });
    scope.register(["Ctrl"], "[", () => {
      var _a;
      if (((_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) === "cardView") {
        this.moveToPreviousPage();
      }
    });
    scope.register([], "Escape", () => {
      this.exit();
    });
    scope.register([], "Enter", (evt) => {
      var _a;
      const shouldRenderCardsManually = ((_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) === "cardView" && this.plugin.settings.renderCardsManually;
      if (shouldRenderCardsManually) {
        evt.preventDefault();
        this.reset();
        this.renewCardViewPage();
      }
    });
    this._detachHotkeys = () => {
      this.app.keymap.popScope(scope);
    };
  }
  detachHotkeys() {
    const detachHotkeys = this._detachHotkeys;
    if (detachHotkeys === void 0) {
      return;
    }
    detachHotkeys();
  }
  get onSearchResultItemDetected() {
    return () => {
      var _a, _b;
      if (((_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) !== "cardView") {
        return;
      }
      if (this.currentFocusId !== void 0) {
        return;
      }
      const cardsPerPage = this.cardsPerPage();
      if (cardsPerPage === void 0) {
        return;
      }
      if (this.countSearchItemDetected >= cardsPerPage) {
        return;
      }
      if (this.countSearchItemDetected === 0) {
        (_b = this.cardView) == null ? void 0 : _b.clear();
      }
      this.showCardViewItem(this.countSearchItemDetected);
      if (this.countSearchItemDetected === 0) {
        this.retryCardView(DELAY_TO_RELOAD_IN_MILLISECOND);
      }
      this.countSearchItemDetected++;
    };
  }
  get onSortOrderChanged() {
    return () => {
      var _a;
      this.reset();
      if (((_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) === "cardView") {
        this.renewCardViewPage();
      }
    };
  }
  shouldCollapseSidedock(reason) {
    var _a, _b;
    if (!((_a = this.plugin.settings) == null ? void 0 : _a.autoToggleSidebar)) {
      return false;
    }
    if (reason === void 0) {
      return true;
    }
    if (reason.id !== "mouse") {
      return true;
    }
    const targetEl = reason.event.target;
    if (!(targetEl instanceof HTMLElement)) {
      return true;
    }
    return !((_b = this.searchInterface.sideDock) == null ? void 0 : _b.containerEl.contains(targetEl));
  }
};

// src/interfaces/SearchComponentInterface.ts
var import_obsidian11 = __toModule(require("obsidian"));

// src/types/Guards.ts
var import_obsidian10 = __toModule(require("obsidian"));
var SORT_ORDER_IN_SEARCH = [
  "alphabeticalReverse",
  "alphabetical",
  "byModifiedTime",
  "byModifiedTimeReverse",
  "byCreatedTime",
  "byCreatedTimeReverse"
];
function isSearchView(view) {
  if (typeof view !== "object") {
    return false;
  }
  if (view === null) {
    return false;
  }
  const {
    matchingCase,
    explainSearch,
    dom,
    setCollapseAll,
    setExplainSearch,
    setExtraContext,
    setMatchingCase,
    setSortOrder,
    searchInfoEl,
    searchComponent,
    headerDom
  } = view;
  if (typeof matchingCase !== "boolean") {
    return false;
  }
  if (typeof explainSearch !== "boolean") {
    return false;
  }
  if (!isSearchDom(dom)) {
    return false;
  }
  if (typeof searchComponent !== "object") {
    return false;
  }
  if (typeof searchInfoEl !== "object") {
    return false;
  }
  if (!(searchInfoEl instanceof HTMLDivElement)) {
    return false;
  }
  if (!isSearchHeaderDom(headerDom)) {
    return false;
  }
  if (!(setCollapseAll instanceof Function)) {
    return false;
  }
  if (!(setExplainSearch instanceof Function)) {
    return false;
  }
  if (!(setExtraContext instanceof Function)) {
    return false;
  }
  if (!(setMatchingCase instanceof Function)) {
    return false;
  }
  if (!(setSortOrder instanceof Function)) {
    return false;
  }
  return true;
}
function isSearchDom(obj) {
  if (typeof obj !== "object") {
    return false;
  }
  if (obj === null) {
    return false;
  }
  const { extraContext, collapseAll, sortOrder, children, childrenEl } = obj;
  if (typeof extraContext !== "boolean") {
    return false;
  }
  if (typeof collapseAll !== "boolean") {
    return false;
  }
  if (typeof sortOrder !== "string") {
    return false;
  }
  if (!SORT_ORDER_IN_SEARCH.includes(sortOrder)) {
    return false;
  }
  if (typeof children !== "object") {
    return false;
  }
  if (!(children instanceof Array)) {
    return false;
  }
  for (const child of children) {
    if (!isSearchResultItem(child)) {
      return false;
    }
  }
  if (typeof childrenEl !== "object") {
    return false;
  }
  if (!(childrenEl instanceof HTMLElement)) {
    return false;
  }
  return true;
}
function isSearchResultItem(obj) {
  if (typeof obj !== "object" || obj === null) {
    return false;
  }
  const { file, containerEl } = obj;
  if (!(file instanceof import_obsidian10.TFile)) {
    return false;
  }
  if (!(containerEl instanceof HTMLElement)) {
    return false;
  }
  return true;
}
function isSearchHeaderDom(obj) {
  if (typeof obj !== "object" || obj === null) {
    return false;
  }
  const { navButtonsEl } = obj;
  if (typeof navButtonsEl !== "object") {
    return false;
  }
  if (!(navButtonsEl instanceof HTMLDivElement)) {
    return false;
  }
  return true;
}

// src/utils/LinkedList.ts
var LinkedList = class {
  constructor(events, eventId) {
    this.unlinkedPool = new Map();
    this.events = events;
    this.eventId = eventId;
  }
  structure(cur, pre) {
    let linked = false;
    if (pre === void 0) {
      this.setRoot(cur);
      linked = true;
      this.signal();
    } else if (this.tail !== void 0 && pre === this.tail.entity) {
      this.link(cur);
      linked = true;
      this.unlinkedPool.delete(cur);
      this.signal();
    }
    if (linked) {
      if (!this.unlinkedPool.has(cur)) {
        return;
      }
      const next = this.unlinkedPool.get(cur);
      if (next === void 0) {
        return;
      }
      this.structure(next, cur);
    } else {
      if (pre) {
        this.unlinkedPool.set(pre, cur);
      }
    }
  }
  setRoot(entity) {
    const rootNode = {
      entity,
      pre: void 0,
      next: void 0
    };
    this.head = rootNode;
    this.tail = rootNode;
  }
  link(cur) {
    if (!this.tail) {
      return;
    }
    const currentTail = this.tail;
    currentTail.next = {
      entity: cur,
      pre: currentTail,
      next: void 0
    };
    this.tail = currentTail.next;
  }
  clean() {
    this.head = void 0;
    this.tail = void 0;
    this.unlinkedPool = new Map();
  }
  signal() {
    this.events.trigger(this.eventId);
  }
};

// src/interfaces/SearchComponentInterface.ts
var SearchComponentInterface = class extends import_obsidian11.Component {
  constructor(app, plugin, events) {
    super();
    this.observationConfig = {
      childList: true
    };
    this.onObservedCallback = (mutations, _observer) => __async(this, null, function* () {
      for (const mutation of mutations) {
        if (mutation.addedNodes.length === 0) {
          continue;
        }
        const pre = mutation.previousSibling;
        if (!(pre instanceof HTMLElement)) {
          continue;
        }
        for (const node of Array.from(mutation.addedNodes)) {
          if (!(node instanceof HTMLElement)) {
            continue;
          }
          const isSearchResultItem2 = node.tagName === "DIV" && node.hasClass("tree-item") && node.hasClass("search-result");
          if (!isSearchResultItem2) {
            continue;
          }
          if (!this.linkedList) {
            return;
          }
          this.linkedList.structure(node, this.isRootSearchResult(pre) ? void 0 : pre);
        }
      }
    });
    this.app = app;
    this.plugin = plugin;
    this.events = events;
    this.observer = new MutationObserver(this.onObservedCallback.bind(this));
  }
  onload() {
    this.app.workspace.onLayoutReady(() => {
      this.renewSortOrderInfo();
      this.registerDomEvent(document, "click", () => {
        this.renewSortOrderInfo(this.events);
      });
    });
  }
  onunload() {
    var _a, _b;
    (_a = this.sortOrderContainerEl) == null ? void 0 : _a.empty();
    (_b = this.sortOrderContainerEl) == null ? void 0 : _b.remove();
    this.observer.disconnect();
  }
  toggleMatchingCase() {
    const view = this.searchView;
    view == null ? void 0 : view.setMatchingCase(!view.matchingCase);
  }
  toggleExplainSearch() {
    const view = this.searchView;
    view == null ? void 0 : view.setExplainSearch(!view.explainSearch);
  }
  toggleCollapseAll() {
    const view = this.searchView;
    view == null ? void 0 : view.setCollapseAll(!view.dom.collapseAll);
  }
  toggleExtraContext() {
    const view = this.searchView;
    view == null ? void 0 : view.setExtraContext(!view.dom.extraContext);
  }
  setSortOrder(sortOrder) {
    const view = this.searchView;
    const originalOrder = view == null ? void 0 : view.dom.sortOrder;
    view == null ? void 0 : view.setSortOrder(sortOrder);
    return sortOrder !== originalOrder;
  }
  focusOn(pos) {
    var _a;
    this.unfocus();
    const item = this.getResultItemAt(pos);
    if (!item) {
      return;
    }
    item.containerEl.addClass("core-search-assistant_search-result-items-focus");
    item.containerEl.scrollIntoView(((_a = this.plugin.settings) == null ? void 0 : _a.keepSelectedItemsCentered) ? { block: "center" } : { block: "nearest" });
  }
  unfocus() {
    const items = this.resultItems;
    items.forEach((item) => {
      item.containerEl.removeClass("core-search-assistant_search-result-items-focus");
    });
  }
  open(pos, direction) {
    return __async(this, null, function* () {
      const item = this.getResultItemAt(pos);
      if (!item) {
        return;
      }
      const { file } = item;
      const leaf = direction === void 0 ? this.app.workspace.getMostRecentLeaf() : this.app.workspace.splitActiveLeaf(direction);
      yield leaf.openFile(file);
      this.app.workspace.setActiveLeaf(leaf, true, true);
    });
  }
  renewSortOrderInfo(events) {
    if (!this.sortOrderContainerEl) {
      this.createSortOrderEls();
    }
    const view = this.searchView;
    if (!view) {
      return;
    }
    const sortOrder = view.dom.sortOrder;
    if (!this.sortOrderContentEl) {
      return;
    }
    const originalContent = this.sortOrderContentEl.textContent;
    this.sortOrderContentEl.textContent = searchOptions[sortOrder].description;
    if (events !== void 0 && originalContent !== this.sortOrderContentEl.textContent) {
      events.trigger(EVENT_SORT_ORDER_CHANGED);
    }
  }
  count() {
    var _a;
    const results = (_a = this.searchView) == null ? void 0 : _a.dom.children;
    if (!results) {
      return 0;
    }
    return results.length;
  }
  get resultItems() {
    var _a, _b;
    return (_b = (_a = this.searchView) == null ? void 0 : _a.dom.children) != null ? _b : [];
  }
  getResultItemAt(pos) {
    var _a;
    return (_a = this.searchView) == null ? void 0 : _a.dom.children[pos];
  }
  get searchInputEl() {
    var _a;
    return (_a = this.searchView) == null ? void 0 : _a.searchComponent.inputEl;
  }
  startWatching(events) {
    var _a;
    this.linkedList = new LinkedList(events, EVENT_SEARCH_RESULT_ITEM_DETECTED);
    const childrenContainerEl = (_a = this.searchView) == null ? void 0 : _a.dom.childrenEl;
    if (!(childrenContainerEl instanceof HTMLElement)) {
      throw "[ERROR in Core Search Assistant] failed to SearchComponentInterface#startWatching: childrenContainerEl is not an instance of HTMLElement";
    }
    this.observer.observe(childrenContainerEl, this.observationConfig);
  }
  stopWatching() {
    this.observer.disconnect();
  }
  collapseOppositeSidedock() {
    const sideDock = this.oppositeSidedock;
    if (sideDock === void 0) {
      throw "[ERROR in Core Search Assistant] failed to collapseOppositeSidedock: failed to fetch the opposite sidedock";
    }
    sideDock.collapse();
  }
  expandOppositeSidedock() {
    const sideDock = this.oppositeSidedock;
    if (sideDock === void 0) {
      throw "[ERROR in Core Search Assistant] failed to expandOppositeSidedock: failed to fetch the opposite sidedock";
    }
    sideDock.expand();
  }
  collapseSidedock() {
    const sideDock = this.sideDock;
    if (sideDock === void 0) {
      throw "[ERROR in Core Search Assistant] failed to collapseSidedock: failed to fetch the sidedock";
    }
    sideDock.collapse();
  }
  get sideDock() {
    const leaf = this.searchLeaf;
    if (leaf === void 0) {
      return void 0;
    }
    const parent = leaf.getRoot();
    if (parent instanceof import_obsidian11.WorkspaceSidedock) {
      return parent;
    } else {
      return void 0;
    }
  }
  get oppositeSidedock() {
    const leaf = this.searchLeaf;
    if (leaf === void 0) {
      return void 0;
    }
    const parent = leaf.getRoot();
    if (parent === this.app.workspace.leftSplit) {
      const opposite = this.app.workspace.rightSplit;
      return opposite instanceof import_obsidian11.WorkspaceSidedock ? opposite : void 0;
    } else if (parent === this.app.workspace.rightSplit) {
      const opposite = this.app.workspace.leftSplit;
      return opposite instanceof import_obsidian11.WorkspaceSidedock ? opposite : void 0;
    } else {
      return void 0;
    }
  }
  createSortOrderEls() {
    this.sortOrderContainerEl = createEl("div", {
      cls: "search-info-container"
    });
    this.sortOrderContentEl = this.sortOrderContainerEl.createEl("div");
    const view = this.searchView;
    if (!view) {
      return void 0;
    }
    this.sortOrderContainerEl.insertAfter(view.searchInfoEl);
  }
  get matchingCaseButtonEl() {
    var _a;
    return (_a = this.searchView) == null ? void 0 : _a.matchingCaseButtonEl;
  }
  get tabHeaderEl() {
    var _a;
    return (_a = this.searchLeaf) == null ? void 0 : _a.tabHeaderEl;
  }
  isBuiltInElementToOpenFile(el) {
    const isFileNameContainerEl = el.tagName === "DIV" && el.hasClass("tree-item-inner");
    const isMatchCountContainerEl = el.tagName === "DIV" && el.hasClass("tree-item-flair-outer");
    const isMatchContainerEl = el.tagName === "DIV" && el.hasClass("search-result-file-match");
    if (isFileNameContainerEl || isMatchContainerEl || isMatchCountContainerEl) {
      return true;
    }
    const parentEl = el.parentElement;
    if (parentEl === null) {
      return false;
    } else {
      return this.isBuiltInElementToOpenFile(parentEl);
    }
  }
  isShowMoreContextButton(el) {
    return el.tagName === "DIV" && el.hasClass("search-result-hover-button");
  }
  get searchView() {
    const leaf = this.searchLeaf;
    if (!leaf) {
      return void 0;
    }
    const view = leaf.view;
    return isSearchView(view) ? view : void 0;
  }
  get searchLeaf() {
    return this.app.workspace.getLeavesOfType("search")[0];
  }
  isRootSearchResult(el) {
    return el.tagName === "DIV" && !el.hasClass("tree-item") && !el.hasClass("search-result");
  }
};

// src/main.ts
var import_obsidian12 = __toModule(require("obsidian"));
var CoreSearchAssistantPlugin = class extends import_obsidian12.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.events = new CoreSearchAssistantEvents();
      this.searchInterface = this.addChild(new SearchComponentInterface(this.app, this, this.events));
      this.controller = this.addChild(new Controller(this.app, this, this.events, this.searchInterface));
      this.watchLayoutChange();
      this.addSettingTab(new CoreSearchAssistantSettingTab(this.app, this));
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  renewController() {
    if (this.controller) {
      this.removeChild(this.controller);
    }
    if (this.events === void 0) {
      throw "[ERROR in Core Search Interface] failed to renewController: plugin.events = undefined";
    }
    if (this.searchInterface === void 0) {
      throw "[ERROR in Core Search Interface] failed to renewController: plugin.searchInterface = undefined";
    }
    this.controller = this.addChild(new Controller(this.app, this, this.events, this.searchInterface));
  }
  watchLayoutChange() {
    this.app.workspace.onLayoutReady(() => {
      this.app.workspace.on("layout-change", () => __async(this, null, function* () {
        var _a;
        if (yield (_a = this.controller) == null ? void 0 : _a.layoutChanged()) {
          this.renewController();
        }
      }));
    });
  }
};
