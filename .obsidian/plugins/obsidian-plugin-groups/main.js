/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PgMain
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/GroupSettingsTab.ts
var import_obsidian5 = require("obsidian");

// src/PluginGroupEditModal.ts
var import_obsidian4 = require("obsidian");

// src/PgPlugin.ts
var PgPlugin = class {
  constructor(id, name) {
    this.id = id;
    this.name = name;
  }
};

// src/Utilities.ts
function getAllAvailablePlugins() {
  const manifests = this.app.plugins.manifests;
  const plugins = [];
  for (const key in manifests) {
    if (manifests[key].id === PgMain.pluginId)
      continue;
    const info = new PgPlugin(manifests[key].id, manifests[key].name);
    plugins.push(info);
  }
  return plugins;
}
function generateGroupID(name, delay) {
  var _a;
  let id = nameToId((delay ? "stg-" : "pg-") + name);
  const groupMap = (_a = PgMain.instance) == null ? void 0 : _a.settings.groupsMap;
  if (!groupMap) {
    return void 0;
  }
  if (!groupMap.has(id)) {
    return id;
  }
  for (let i = 0; i < 512; i++) {
    const nrdId = id + i.toString();
    id += i.toString();
    if (!groupMap.has(id)) {
      return delay ? nrdId + delay.toString() : nrdId;
    }
  }
  return void 0;
}
function nameToId(name) {
  return name.replace(/[\W_]/g, "").toLowerCase();
}
function saveVaultLocalStorage(key, object) {
  app.saveLocalStorage(key, object);
}
function loadVaultLocalStorage(key) {
  return app.loadLocalStorage(key);
}
function getKnownPluginIds() {
  const ids = loadVaultLocalStorage(PgMain.knownPluginIdsKey);
  if (!ids) {
    return null;
  }
  return new Set(JSON.parse(ids));
}
function setKnownPluginIds(ids) {
  if (!ids) {
    return;
  }
  const setAsString = JSON.stringify([...ids]);
  saveVaultLocalStorage(PgMain.knownPluginIdsKey, setAsString);
}
function getInstalledPluginIds() {
  const manifests = this.app.plugins.manifests;
  const installedPlugins = /* @__PURE__ */ new Set();
  for (const key in manifests) {
    installedPlugins.add(key);
  }
  return installedPlugins;
}
function getInstalledPluginFromId(id) {
  if (!this.app.plugins.manifests[id]) {
    return null;
  }
  return new PgPlugin(this.app.plugins.manifests[id].id, this.app.plugins.manifests[id].name);
}
function getCurrentlyActiveDevice() {
  const device = loadVaultLocalStorage(PgMain.deviceNameKey);
  if (typeof device === "string") {
    return device;
  }
  return null;
}
function setCurrentlyActiveDevice(device) {
  saveVaultLocalStorage(PgMain.deviceNameKey, device);
}
function checkPluginEnabled(plugin) {
  return app.plugins.enabledPlugins.has(plugin.id);
}
async function enablePlugin(plugin) {
  return app.plugins.enablePlugin(plugin.id);
}
function disablePlugin(plugin) {
  app.plugins.disablePlugin(plugin.id);
}

// src/ConfirmationPopupModal.ts
var import_obsidian = require("obsidian");
var ConfirmationPopupModal = class extends import_obsidian.Modal {
  constructor(app2, headerText, cancelText, confirmText, onConfirmListener) {
    super(app2);
    this.onConfirm = new Event("onConfirm");
    this.headerText = headerText;
    this.eventTarget = new EventTarget();
    this.cancelText = cancelText != null ? cancelText : "Cancel";
    this.confirmText = confirmText != null ? confirmText : "Confirm";
    if (onConfirmListener) {
      this.eventTarget.addEventListener(this.onConfirm.type, onConfirmListener);
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: this.headerText });
    new import_obsidian.Setting(contentEl).addButton((btn) => {
      btn.setButtonText(this.cancelText);
      btn.onClick(() => this.close());
    }).addButton((btn) => {
      btn.setButtonText(this.confirmText);
      btn.onClick(() => {
        this.eventTarget.dispatchEvent(this.onConfirm);
        this.close();
      });
    });
  }
};

// src/PluginGroup.ts
var import_obsidian2 = require("obsidian");
var PluginGroup = class {
  constructor(pgData) {
    this.loadAtStartup = false;
    this.disableOnStartup = false;
    this.delay = 0;
    var _a, _b, _c, _d, _e;
    this.id = pgData.id;
    this.name = pgData.name;
    this.assignAndLoadPlugins(pgData.plugins);
    this.groupIds = (_a = pgData.groupIds) != null ? _a : [];
    this.loadAtStartup = (_b = pgData.loadAtStartup) != null ? _b : false;
    this.disableOnStartup = (_c = pgData.disableOnStartup) != null ? _c : false;
    this.delay = (_d = pgData.delay) != null ? _d : 2;
    this.generateCommands = (_e = pgData.generateCommands) != null ? _e : false;
    this.assignedDevices = pgData.assignedDevices;
    this.autoAdd = pgData.autoAdd;
  }
  groupActive() {
    var _a;
    if (!this.assignedDevices || this.assignedDevices.length === 0) {
      return true;
    }
    const activeDevice = getCurrentlyActiveDevice();
    if (!activeDevice) {
      return true;
    }
    return !!((_a = this.assignedDevices) == null ? void 0 : _a.contains(activeDevice));
  }
  assignAndLoadPlugins(plugins) {
    this.plugins = plugins != null ? plugins : [];
  }
  startup() {
    if (!this.loadAtStartup) {
      return;
    }
    if (this.disableOnStartup) {
      setTimeout(async () => {
        await this.disable();
      }, this.delay * 1e3);
      return;
    }
    setTimeout(async () => {
      await this.enable();
    }, this.delay * 1e3);
    return;
  }
  async enable() {
    var _a, _b, _c, _d;
    if (!this.groupActive()) {
      return;
    }
    const pluginPromises = [];
    for (const plugin of this.plugins) {
      if (checkPluginEnabled(plugin)) {
        continue;
      }
      pluginPromises.push(enablePlugin(plugin));
    }
    await Promise.allSettled(pluginPromises);
    for (const groupId of this.groupIds) {
      await ((_a = PgMain.groupFromId(groupId)) == null ? void 0 : _a.enable());
    }
    if ((_b = PgMain.instance) == null ? void 0 : _b.settings.showNoticeOnGroupLoad) {
      const messageString = "Loaded " + this.name;
      if (((_c = PgMain.instance) == null ? void 0 : _c.settings.showNoticeOnGroupLoad) === "short") {
        new import_obsidian2.Notice(messageString);
      } else if (((_d = PgMain.instance) == null ? void 0 : _d.settings.showNoticeOnGroupLoad) === "normal") {
        new import_obsidian2.Notice(messageString + "\n" + this.getGroupListString());
      }
    }
  }
  disable() {
    var _a, _b, _c;
    if (!this.groupActive()) {
      return;
    }
    this.plugins.forEach((plugin) => {
      disablePlugin(plugin);
    });
    this.groupIds.forEach((groupId) => {
      var _a2;
      (_a2 = PgMain.groupFromId(groupId)) == null ? void 0 : _a2.disable();
    });
    if (((_a = PgMain.instance) == null ? void 0 : _a.settings.showNoticeOnGroupLoad) !== "none") {
      const messageString = "Disabled " + this.name;
      if (((_b = PgMain.instance) == null ? void 0 : _b.settings.showNoticeOnGroupLoad) === "short") {
        new import_obsidian2.Notice(messageString);
      } else if (((_c = PgMain.instance) == null ? void 0 : _c.settings.showNoticeOnGroupLoad) === "normal") {
        new import_obsidian2.Notice(messageString + "\n" + this.getGroupListString());
      }
    }
  }
  getGroupListString() {
    let messageString = "";
    this.plugins && this.plugins.length > 0 ? messageString += "- Plugins:\n" + this.plugins.map((p) => " - " + p.name + "\n").join("") : messageString += "";
    this.groupIds && this.groupIds.length > 0 ? messageString += "- Groups:\n" + this.groupIds.map((g) => {
      const group = PgMain.groupFromId(g);
      if (group && group.groupActive()) {
        return " - " + group.name + "\n";
      }
    }).join("") : messageString += "";
    return messageString;
  }
  addPlugin(plugin) {
    if (this.plugins.map((p) => p.id).contains(plugin.id))
      return false;
    this.plugins.push(plugin);
    return true;
  }
  addGroup(group) {
    if (!group.wouldHaveCyclicGroups(this.id)) {
      if (this.groupIds.contains(group.id))
        return false;
      this.groupIds.push(group.id);
      return true;
    } else {
      new import_obsidian2.Notice("Couldn't add this group, it would create a loop of group activations:\n Group A \u2192 Group B \u2192 Group A", 4e3);
    }
    return false;
  }
  removePlugin(plugin) {
    const indexOfPlugin = this.plugins.map((p) => p.id).indexOf(plugin.id);
    if (indexOfPlugin === -1)
      return true;
    return this.plugins.splice(indexOfPlugin, 1).length > 0;
  }
  removeGroup(group) {
    const indexOfGroup = this.groupIds.indexOf(group.id);
    if (indexOfGroup === -1)
      return true;
    return this.groupIds.splice(indexOfGroup, 1).length > 0;
  }
  wouldHaveCyclicGroups(idToCheck) {
    var _a;
    if (this.id === idToCheck) {
      return true;
    }
    for (let i = 0; i < this.groupIds.length; i++) {
      const groupId = this.groupIds[i];
      if ((_a = PgMain.groupFromId(groupId)) == null ? void 0 : _a.wouldHaveCyclicGroups(idToCheck)) {
        return true;
      }
    }
    return false;
  }
};

// src/DeviceSelectionModal.ts
var import_obsidian3 = require("obsidian");
var DeviceSelectionModal = class extends import_obsidian3.Modal {
  constructor(app2, onConfirmSelectionListener, selectedDevices) {
    var _a;
    super(app2);
    this.eventTarget = new EventTarget();
    this.onConfirm = new CustomEvent("onConfirm", {
      detail: {
        devices: []
      }
    });
    this.selectedDevices = /* @__PURE__ */ new Set();
    this.headerText = "New device detected please enter a unique name.";
    this.cancelText = "Cancel";
    this.confirmText = "Confirm";
    this.selectedDevices = new Set(selectedDevices);
    if (((_a = this.selectedDevices) == null ? void 0 : _a.size) > 0) {
      this.onConfirm.detail.devices = Array.from(this.selectedDevices.values());
    }
    this.eventTarget.addEventListener(this.onConfirm.type, onConfirmSelectionListener);
  }
  onOpen() {
    var _a;
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: this.headerText });
    contentEl.createEl("h6", { text: "Existing Devices" });
    (_a = PgMain.instance) == null ? void 0 : _a.settings.devices.forEach((device) => {
      new import_obsidian3.Setting(contentEl).setName(device).addButton((tgl) => {
        tgl.setIcon(this.selectedDevices.has(device) ? "check-circle" : "circle").onClick(() => {
          if (this.selectedDevices.has(device)) {
            this.selectedDevices.delete(device);
            tgl.setIcon("circle");
          } else {
            this.selectedDevices.add(device);
            tgl.setIcon("check-circle");
          }
        });
      });
    });
    new import_obsidian3.Setting(contentEl).addButton((btn) => {
      btn.setButtonText(this.cancelText);
      btn.onClick(() => this.close());
    }).addButton((btn) => {
      btn.setButtonText(this.confirmText);
      btn.onClick(() => {
        this.onConfirm.detail.devices = Array.from(this.selectedDevices.values());
        this.eventTarget.dispatchEvent(this.onConfirm);
        this.close();
      });
    });
  }
};

// src/PluginGroupEditModal.ts
var PluginGroupEditModal = class extends import_obsidian4.Modal {
  constructor(app2, settingsTab, group) {
    super(app2);
    this.discardChanges = true;
    this.pluginListElements = /* @__PURE__ */ new Map();
    this.groupListElements = /* @__PURE__ */ new Map();
    this.settingsTab = settingsTab;
    this.groupToEdit = group;
    this.availablePlugins = getAllAvailablePlugins();
    if (PgMain.instance) {
      this.availableGroups = Array.from(PgMain.instance.settings.groupsMap.values()).filter((g) => g.id !== group.id);
    }
    this.groupToEditCache = JSON.stringify(group);
  }
  onOpen() {
    const { modalEl } = this;
    modalEl.empty();
    const contentEl = modalEl.createEl("div", { cls: "group-edit-modal-content " });
    contentEl.createEl("h2", { text: "Edit Group" });
    new import_obsidian4.Setting(contentEl).setName("Name").addText((txt) => {
      txt.setValue(this.groupToEdit.name);
      txt.onChange((val) => this.groupToEdit.name = val);
    });
    new import_obsidian4.Setting(contentEl).setName("Commands").setDesc("Add Commands to enable/disable this group").addToggle((tgl) => {
      tgl.setValue(this.groupToEdit.generateCommands);
      tgl.onChange((value) => this.groupToEdit.generateCommands = value);
    });
    new import_obsidian4.Setting(contentEl).setName("Auto Add").setDesc("Automatically add new Plugins to this group").addToggle((tgl) => {
      var _a;
      tgl.setValue((_a = this.groupToEdit.autoAdd) != null ? _a : false);
      tgl.onChange((value) => this.groupToEdit.autoAdd = value);
    });
    const devicesSetting = new import_obsidian4.Setting(contentEl).setName("Devices").setDesc(this.getDevicesDescription()).addButton((btn) => {
      btn.setIcon("pencil").onClick(() => {
        new DeviceSelectionModal(app, (evt) => {
          this.groupToEdit.assignedDevices = evt.detail.devices;
          devicesSetting.setDesc(this.getDevicesDescription());
        }, this.groupToEdit.assignedDevices).open();
      });
    });
    this.GenerateStartupSettings(contentEl);
    this.GeneratePluginSelectionList(contentEl);
    this.GenerateGroupSelectionList(contentEl);
    this.GenerateFooter(modalEl);
  }
  getDevicesDescription() {
    let description = "Active on All devices";
    if (!this.groupToEdit.assignedDevices) {
      return description;
    }
    const arr = this.groupToEdit.assignedDevices.filter((device) => {
      var _a;
      return (_a = PgMain.instance) == null ? void 0 : _a.settings.devices.contains(device);
    });
    if ((arr == null ? void 0 : arr.length) > 0) {
      description = "Active on: " + arr.reduce((acc, curr, i, arr2) => {
        if (i < 3) {
          return acc + ", " + curr;
        } else if (i === arr2.length - 1) {
          return acc + ", ... and " + (i - 2) + " other" + (i - 2 > 1 ? "s" : "");
        }
        return acc;
      });
    }
    return description;
  }
  GenerateStartupSettings(contentEl) {
    const startupParent = contentEl.createEl("div");
    startupParent.createEl("h3", { text: "Startup" });
    let delaySetting;
    let behaviourElement;
    const ChangeOptionVisibility = () => {
      if (delaySetting) {
        this.groupToEdit.loadAtStartup ? delaySetting.settingEl.show() : delaySetting.settingEl.hide();
      }
      if (behaviourElement) {
        this.groupToEdit.loadAtStartup ? behaviourElement.show() : behaviourElement.hide();
      }
    };
    new import_obsidian4.Setting(startupParent).setName("Load on Startup").addDropdown((drp) => {
      behaviourElement = drp.selectEl;
      drp.addOption("enable", "Enable");
      drp.addOption("disable", "Disable");
      drp.setValue(this.groupToEdit.disableOnStartup ? "disable" : "enable");
      drp.onChange((value) => {
        value === "disable" ? this.groupToEdit.disableOnStartup = true : this.groupToEdit.disableOnStartup = false;
      });
    }).addToggle((tgl) => {
      tgl.onChange((value) => {
        this.groupToEdit.loadAtStartup = value;
        ChangeOptionVisibility();
      });
      tgl.setValue(this.groupToEdit.loadAtStartup);
    });
    delaySetting = new import_obsidian4.Setting(startupParent).setName("Delay").addSlider((slider) => {
      slider.setValue(this.groupToEdit.delay);
      slider.setLimits(0, PgMain.disableStartupTimeout, 1);
      slider.onChange((value) => {
        this.groupToEdit.delay = value;
        delaySetting.setDesc(value.toString());
      });
    }).setDesc(this.groupToEdit.delay.toString());
    ChangeOptionVisibility();
  }
  GeneratePluginSelectionList(parentElement) {
    let searchAndList = void 0;
    this.pluginSelection = parentElement.createEl("div");
    let showingPlugins = true;
    const headerSetting = new import_obsidian4.Setting(this.pluginSelection).addButton((btn) => {
      btn.setIcon("eye");
      btn.onClick(() => {
        if (!searchAndList) {
          return;
        }
        if (showingPlugins) {
          btn.setIcon("eye-off");
          searchAndList.hide();
          showingPlugins = false;
        } else {
          btn.setIcon("eye");
          searchAndList.show();
          showingPlugins = true;
        }
      });
    });
    headerSetting.nameEl.createEl("h4", { text: "Plugins" });
    searchAndList = this.pluginSelection.createEl("div");
    new import_obsidian4.Setting(searchAndList).setName("Search").addText((txt) => {
      txt.setPlaceholder("Search for Plugin...");
      txt.onChange((search) => {
        this.searchPlugins(search);
      });
    });
    const pluginList = searchAndList.createEl("div");
    pluginList.addClass("group-edit-modal-plugin-list");
    this.pluginListElements = /* @__PURE__ */ new Map();
    this.sortPlugins(this.availablePlugins).forEach((plugin) => {
      const setting = new import_obsidian4.Setting(pluginList).setName(plugin.name).addButton((btn) => {
        btn.setIcon(this.groupToEdit.plugins.map((p) => p.id).contains(plugin.id) ? "check-circle" : "circle").onClick(() => {
          this.togglePluginForGroup(plugin);
          btn.setIcon(this.groupToEdit.plugins.map((p) => p.id).contains(plugin.id) ? "check-circle" : "circle");
        });
      });
      this.pluginListElements.set(plugin.id, setting);
    });
  }
  GenerateGroupSelectionList(parentElement) {
    let searchAndList = void 0;
    this.groupSelection = parentElement.createEl("div");
    let showGroups = true;
    const headerSetting = new import_obsidian4.Setting(this.groupSelection).addButton((btn) => {
      btn.setIcon("eye");
      btn.onClick(() => {
        if (!searchAndList) {
          return;
        }
        if (showGroups) {
          btn.setIcon("eye-off");
          searchAndList.hide();
          showGroups = false;
        } else {
          btn.setIcon("eye");
          searchAndList.show();
          showGroups = true;
        }
      });
    });
    headerSetting.nameEl.createEl("h4", { text: "Groups" });
    searchAndList = this.groupSelection.createEl("div");
    new import_obsidian4.Setting(searchAndList).setName("Search").addText((txt) => {
      txt.setPlaceholder("Search for Groups...");
      txt.onChange((search) => {
        this.searchGroups(search);
      });
    });
    const groupList = searchAndList.createEl("div");
    groupList.addClass("group-edit-modal-plugin-list");
    this.groupListElements = /* @__PURE__ */ new Map();
    this.sortGroups(this.availableGroups).forEach((pluginGroup) => {
      const setting = new import_obsidian4.Setting(groupList).setName(pluginGroup.name).addButton((btn) => {
        btn.setIcon(this.groupToEdit.groupIds.contains(pluginGroup.id) ? "check-circle" : "circle").onClick(() => {
          this.toggleGroupForGroup(pluginGroup);
          btn.setIcon(this.groupToEdit.groupIds.contains(pluginGroup.id) ? "check-circle" : "circle");
        });
      });
      this.groupListElements.set(pluginGroup.id, setting);
    });
  }
  searchPlugins(search) {
    const hits = this.availablePlugins.filter((p) => p.name.toLowerCase().contains(search.toLowerCase())).map((p) => p.id);
    this.pluginListElements.forEach((plugin) => plugin.settingEl.hide());
    hits.forEach((id) => {
      var _a;
      return (_a = this.pluginListElements.get(id)) == null ? void 0 : _a.settingEl.show();
    });
  }
  searchGroups(search) {
    const hits = this.availableGroups.filter((p) => p.name.toLowerCase().contains(search.toLowerCase())).map((p) => p.id);
    this.groupListElements.forEach((group) => group.settingEl.hide());
    hits.forEach((id) => {
      var _a;
      return (_a = this.groupListElements.get(id)) == null ? void 0 : _a.settingEl.show();
    });
  }
  GenerateFooter(parentElement) {
    const footer = parentElement.createEl("div");
    footer.addClass("group-edit-modal-footer");
    new import_obsidian4.Setting(footer).addButton((btn) => {
      btn.setButtonText("Delete");
      btn.onClick(() => new ConfirmationPopupModal(this.app, "You are about to delete: " + this.groupToEdit.name, void 0, "Delete", () => this.deleteGroup()).open());
    }).addButton((btn) => {
      btn.setButtonText("Cancel");
      btn.onClick(() => this.close());
    }).addButton((btn) => {
      btn.setButtonText("Save");
      btn.onClick(() => this.saveChanges());
    }).addExtraButton((btn) => {
      btn.setIcon("copy").setTooltip("Duplicate this group").onClick(() => this.duplicate());
    }).settingEl.addClass("modal-footer");
  }
  sortPlugins(plugins) {
    return plugins.sort((a, b) => {
      const aInGroup = this.isPluginInGroup(a);
      const bInGroup = this.isPluginInGroup(b);
      if (aInGroup && !bInGroup)
        return -1;
      else if (!aInGroup && bInGroup)
        return 1;
      else {
        return a.name.localeCompare(b.name);
      }
    });
  }
  isPluginInGroup(plugin) {
    return this.groupToEdit.plugins.map((p) => p.id).contains(plugin.id);
  }
  sortGroups(groups) {
    return groups.sort((a, b) => {
      const aInGroup = this.isGroupInGroup(a);
      const bInGroup = this.isGroupInGroup(b);
      if (aInGroup && !bInGroup)
        return -1;
      else if (!aInGroup && bInGroup)
        return 1;
      else {
        return a.name.localeCompare(b.name);
      }
    });
  }
  isGroupInGroup(plugin) {
    return this.groupToEdit.plugins.map((p) => p.id).contains(plugin.id);
  }
  togglePluginForGroup(plugin) {
    if (this.groupToEdit.plugins.map((p) => p.id).contains(plugin.id)) {
      this.groupToEdit.removePlugin(plugin);
    } else {
      this.groupToEdit.addPlugin(plugin);
    }
  }
  toggleGroupForGroup(group) {
    if (this.groupToEdit.groupIds.contains(group.id)) {
      return this.groupToEdit.removeGroup(group);
    } else {
      return this.groupToEdit.addGroup(group);
    }
  }
  onClose() {
    var _a;
    const { contentEl } = this;
    contentEl.empty();
    if (((_a = PgMain.instance) == null ? void 0 : _a.settings.groupsMap.has(this.groupToEdit.id)) && this.discardChanges) {
      Object.assign(this.groupToEdit, JSON.parse(this.groupToEditCache));
    }
  }
  async saveChanges() {
    var _a;
    this.discardChanges = false;
    if ((_a = PgMain.instance) == null ? void 0 : _a.settings.groupsMap.has(this.groupToEdit.id)) {
      await this.editGroup(this.groupToEdit);
    } else {
      await this.addGroup(this.groupToEdit);
    }
  }
  async duplicate() {
    var _a;
    const duplicateGroup = new PluginGroup(this.groupToEdit);
    const groupMap = (_a = PgMain.instance) == null ? void 0 : _a.settings.groupsMap;
    if (!groupMap) {
      return;
    }
    duplicateGroup.name += "-Duplicate";
    const genId = generateGroupID(duplicateGroup.name);
    if (!genId) {
      return;
    }
    duplicateGroup.id = genId;
    await this.addGroup(duplicateGroup);
  }
  async addGroup(group) {
    var _a, _b;
    (_a = PgMain.instance) == null ? void 0 : _a.settings.groupsMap.set(group.id, group);
    (_b = PgMain.instance) == null ? void 0 : _b.AddGroupCommands(group.id);
    await this.persistChangesAndClose();
  }
  async editGroup(group) {
    var _a, _b;
    (_a = PgMain.instance) == null ? void 0 : _a.settings.groupsMap.set(group.id, group);
    (_b = PgMain.instance) == null ? void 0 : _b.updateCommand(group.id);
    await this.persistChangesAndClose();
  }
  async persistChangesAndClose() {
    var _a;
    await ((_a = PgMain.instance) == null ? void 0 : _a.saveSettings());
    this.settingsTab.display();
    this.close();
  }
  async deleteGroup() {
    var _a, _b;
    (_a = PgMain.instance) == null ? void 0 : _a.settings.groupsMap.delete(this.groupToEdit.id);
    await ((_b = PgMain.instance) == null ? void 0 : _b.saveSettings());
    this.settingsTab.display();
    this.close();
  }
};

// src/GroupSettingsTab.ts
var GroupSettingsTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
  }
  display() {
    var _a;
    (_a = PgMain.instance) == null ? void 0 : _a.loadNewPlugins();
    const { containerEl } = this;
    containerEl.empty();
    const generalParent = containerEl.createEl("h4", { text: "General" });
    new import_obsidian5.Setting(generalParent).setName("Generate Commands for Groups").addToggle((tgl) => {
      var _a2, _b;
      tgl.setValue((_b = (_a2 = PgMain.instance) == null ? void 0 : _a2.settings.generateCommands) != null ? _b : false);
      tgl.onChange(async (value) => {
        if (!PgMain.instance) {
          return;
        }
        PgMain.instance.settings.generateCommands = value;
        await PgMain.instance.saveSettings();
      });
    });
    new import_obsidian5.Setting(generalParent).setName("Notice upon un-/loading groups").addDropdown((drp) => {
      var _a2, _b;
      drp.addOption("none", "None").addOption("short", "Short").addOption("normal", "Normal");
      drp.setValue((_b = (_a2 = PgMain.instance) == null ? void 0 : _a2.settings.showNoticeOnGroupLoad) != null ? _b : "none");
      drp.onChange(async (value) => {
        if (!PgMain.instance) {
          return;
        }
        PgMain.instance.settings.showNoticeOnGroupLoad = value;
        await PgMain.instance.saveSettings();
      });
    });
    const groupParent = containerEl.createEl("div");
    groupParent.createEl("h5", { text: "Groups" });
    let addBtnEl;
    new import_obsidian5.Setting(groupParent).setName("Add Group").addText((text) => {
      this.groupNameField = text;
      this.groupNameField.setPlaceholder("Enter group name...").setValue(this.newGroupName).onChange((val) => {
        this.newGroupName = val;
        if (addBtnEl) {
          val.replace(" ", "").length > 0 ? addBtnEl.removeClass("btn-disabled") : addBtnEl.addClass("btn-disabled");
        }
      }).inputEl.onkeydown = async (e) => {
        if (e.key === "Enter") {
          await this.addNewGroup();
        }
      };
    }).addButton((btn) => {
      btn.setIcon("plus").onClick(() => this.addNewGroup());
      addBtnEl = btn.buttonEl;
      addBtnEl.addClass("btn-disabled");
    });
    this.GenerateGroupList(groupParent);
    this.GenerateDeviceList(containerEl);
  }
  GenerateGroupList(groupParent) {
    var _a;
    (_a = PgMain.instance) == null ? void 0 : _a.settings.groupsMap.forEach((group) => {
      const groupSetting = new import_obsidian5.Setting(groupParent).setName(group.name).addButton((btn) => {
        btn.setButtonText("Enable");
        btn.setIcon("power");
        btn.onClick(async () => {
          await group.enable();
        });
        group.groupActive() ? btn.buttonEl.removeClass("btn-disabled") : btn.buttonEl.addClass("btn-disabled");
      }).addButton((btn) => {
        btn.setButtonText("Disable");
        btn.setIcon("power-off");
        btn.onClick(() => group.disable());
        group.groupActive() ? btn.buttonEl.removeClass("btn-disabled") : btn.buttonEl.addClass("btn-disabled");
      }).addButton((btn) => {
        btn.setIcon("pencil");
        btn.onClick(() => this.editGroup(group));
      });
      if (group.loadAtStartup) {
        const descFrag = new DocumentFragment();
        const startupEl = descFrag.createEl("span");
        startupEl.createEl("b", {
          text: "Startup: "
        });
        startupEl.createEl("span", { text: "Delayed by " + group.delay + " seconds" });
        if (!group.groupActive()) {
          const activeEl = descFrag.createEl("span");
          activeEl.createEl("br");
          activeEl.createEl("b", { text: "Inactive: " });
          activeEl.createEl("span", { text: "Not enabled for current Device" });
        }
        groupSetting.setDesc(descFrag);
      }
    });
  }
  async addNewGroup() {
    const id = generateGroupID(this.newGroupName);
    if (!id) {
      console.error("Failed to create Group, please choose a different Name as there have been to many groups with the same name");
      return;
    }
    const newGroup = new PluginGroup({
      id,
      name: this.newGroupName
    });
    new PluginGroupEditModal(this.app, this, newGroup).open();
    this.newGroupName = "";
    if (this.groupNameField) {
      this.groupNameField.setValue("");
    }
  }
  editGroup(group) {
    new PluginGroupEditModal(this.app, this, group).open();
  }
  GenerateDeviceList(contentEl) {
    var _a;
    let newDeviceName = "";
    const CreateNewDevice = () => {
      var _a2, _b, _c;
      if (!newDeviceName || newDeviceName.replace(" ", "") === "") {
        return;
      }
      if ((_a2 = PgMain.instance) == null ? void 0 : _a2.settings.devices.contains(newDeviceName)) {
        new import_obsidian5.Notice("Name already in use for other device");
        return;
      }
      (_b = PgMain.instance) == null ? void 0 : _b.settings.devices.push(newDeviceName);
      (_c = PgMain.instance) == null ? void 0 : _c.saveSettings();
      if (!getCurrentlyActiveDevice()) {
        setCurrentlyActiveDevice(newDeviceName);
      }
      this.display();
      newDeviceName = "";
      newDevNameText.setValue(newDeviceName);
    };
    contentEl.createEl("h4", { text: "Devices" });
    let deviceAddBtn;
    const deviceNameSetting = new import_obsidian5.Setting(contentEl).setName("New Device");
    const newDevNameText = new import_obsidian5.TextComponent(deviceNameSetting.controlEl);
    newDevNameText.setValue(newDeviceName).onChange((value) => {
      newDeviceName = value;
      if (deviceAddBtn) {
        value.replace(" ", "").length > 0 ? deviceAddBtn.buttonEl.removeClass("btn-disabled") : deviceAddBtn.buttonEl.addClass("btn-disabled");
      }
    }).setPlaceholder("Device Name").inputEl.onkeydown = (e) => {
      if (e.key === "Enter") {
        CreateNewDevice();
      }
    };
    deviceNameSetting.addButton((btn) => {
      deviceAddBtn = btn;
      deviceAddBtn.setIcon("plus").onClick(() => {
        CreateNewDevice();
      }).buttonEl.addClass("btn-disabled");
    });
    (_a = PgMain.instance) == null ? void 0 : _a.settings.devices.forEach((device) => {
      const deviceSetting = new import_obsidian5.Setting(contentEl).setName(device);
      if (getCurrentlyActiveDevice() === device) {
        deviceSetting.setDesc("Current Device").addButton((btn) => {
          btn.setIcon("trash");
          btn.onClick(() => new ConfirmationPopupModal(this.app, "This is the currently active device, are you sure?", void 0, "Delete", () => {
            this.ResetCurrentDevice();
          }).open());
        });
      } else {
        deviceSetting.addButton((btn) => {
          btn.setButtonText("Set as Current");
          btn.onClick(() => {
            setCurrentlyActiveDevice(device);
            this.display();
          });
        }).addButton((btn) => {
          btn.setIcon("trash");
          btn.onClick(() => new ConfirmationPopupModal(this.app, "You are about to delete: " + device, void 0, "Delete", () => {
            var _a2, _b;
            (_a2 = PgMain.instance) == null ? void 0 : _a2.settings.devices.remove(device);
            (_b = PgMain.instance) == null ? void 0 : _b.saveSettings();
            this.display();
          }).open());
        });
      }
    });
  }
  ResetCurrentDevice() {
    var _a;
    const device = getCurrentlyActiveDevice();
    if (!device) {
      return;
    }
    (_a = PgMain.instance) == null ? void 0 : _a.settings.devices.remove(device);
    setCurrentlyActiveDevice(null);
    this.display();
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  groupsMap: /* @__PURE__ */ new Map(),
  generateCommands: true,
  showNoticeOnGroupLoad: "none",
  devices: []
};
var _PgMain = class extends import_obsidian6.Plugin {
  constructor() {
    super(...arguments);
    this.enableGroupCommandPrefix = "plugin-groups-enable-";
    this.disableGroupCommandPrefix = "plugin-groups-disable-";
    this.cnEnablePrefix = "Plugin Groups: Enable ";
    this.cnDisablePrefix = "Plugin Groups: Disable ";
    this.commandMap = /* @__PURE__ */ new Map();
  }
  async onload() {
    if (_PgMain.instance) {
      return;
    } else {
      _PgMain.instance = this;
    }
    _PgMain.pluginId = this.manifest.id;
    await this.loadSettings();
    this.loadNewPlugins();
    this.addSettingTab(new GroupSettingsTab(this.app, this));
    if (!_PgMain.instance.settings.groupsMap) {
      return;
    }
    if (_PgMain.instance.settings.generateCommands) {
      _PgMain.instance.settings.groupsMap.forEach((group) => this.AddGroupCommands(group.id));
    }
    if (window.performance.now() / 1e3 < _PgMain.disableStartupTimeout) {
      _PgMain.instance.settings.groupsMap.forEach((group) => {
        if (group.loadAtStartup)
          group.startup();
      });
    }
  }
  loadNewPlugins() {
    var _a, _b;
    if (getKnownPluginIds() === null) {
      setKnownPluginIds(getInstalledPluginIds());
    } else {
      const knownPlugins = getKnownPluginIds();
      const installedPlugins = getInstalledPluginIds();
      setKnownPluginIds(installedPlugins);
      const newPlugins = new Set([...installedPlugins].filter((id) => !(knownPlugins == null ? void 0 : knownPlugins.has(id))));
      if (newPlugins.size <= 0) {
        return;
      }
      (_a = _PgMain.instance) == null ? void 0 : _a.settings.groupsMap.forEach((g) => {
        if (g.autoAdd) {
          newPlugins.forEach((pluginId) => {
            const plugin = getInstalledPluginFromId(pluginId);
            if (plugin) {
              g.addPlugin(plugin);
            }
          });
        }
      });
      (_b = _PgMain.instance) == null ? void 0 : _b.saveSettings();
    }
  }
  onunload() {
    if (_PgMain.instance) {
      _PgMain.instance = void 0;
    }
  }
  AddGroupCommands(groupID) {
    const group = _PgMain.groupFromId(groupID);
    if (!group)
      return;
    const enableId = this.enableGroupCommandPrefix + group.id;
    this.commandMap.set(enableId, this.addCommand({
      id: enableId,
      name: this.cnEnablePrefix + group.name,
      icon: "power",
      checkCallback: (checking) => {
        if (!this.shouldShowCommand(group))
          return false;
        if (checking)
          return true;
        group.enable();
      }
    }));
    const disableId = this.disableGroupCommandPrefix + group.id;
    this.commandMap.set(disableId, this.addCommand({
      id: disableId,
      name: this.cnDisablePrefix + group.name,
      icon: "power-off",
      checkCallback: (checking) => {
        if (!this.shouldShowCommand(group))
          return false;
        if (checking)
          return true;
        group.disable();
      }
    }));
  }
  shouldShowCommand(group) {
    var _a, _b;
    if (!((_a = _PgMain.instance) == null ? void 0 : _a.settings.groupsMap.has(group.id)))
      return false;
    if (!((_b = _PgMain.instance) == null ? void 0 : _b.settings.generateCommands))
      return false;
    if (!group.groupActive()) {
      return false;
    }
    return group.generateCommands;
  }
  updateCommand(groupId) {
    const group = _PgMain.groupFromId(groupId);
    if (!group) {
      return;
    }
    let command = this.commandMap.get(this.enableGroupCommandPrefix + group.id);
    if (command) {
      command.name = this.cnEnablePrefix + group.name;
    }
    command = this.commandMap.get(this.disableGroupCommandPrefix + group.id);
    if (command) {
      command.name = this.cnDisablePrefix + group.name;
    }
  }
  async loadSettings() {
    var _a;
    const savedSettings = await this.loadData();
    if (!_PgMain.instance) {
      return;
    }
    _PgMain.instance.settings = Object.assign({}, DEFAULT_SETTINGS);
    if (!savedSettings) {
      return;
    }
    if (!_PgMain.instance.settings) {
      return;
    }
    Object.keys((_a = _PgMain.instance) == null ? void 0 : _a.settings).forEach(function(key) {
      if (key in savedSettings) {
        _PgMain.instance.settings[key] = savedSettings[key];
      }
    });
    if (savedSettings.groups && Array.isArray(savedSettings.groups)) {
      _PgMain.instance.settings.groupsMap = /* @__PURE__ */ new Map();
      savedSettings.groups.forEach((g) => {
        var _a2;
        (_a2 = _PgMain.instance) == null ? void 0 : _a2.settings.groupsMap.set(g.id, new PluginGroup(g));
      });
    }
  }
  async saveSettings() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const persistentSettings = {
      groups: Array.from((_b = (_a = _PgMain.instance) == null ? void 0 : _a.settings.groupsMap.values()) != null ? _b : []),
      generateCommands: (_d = (_c = _PgMain.instance) == null ? void 0 : _c.settings.generateCommands) != null ? _d : DEFAULT_SETTINGS.generateCommands,
      showNoticeOnGroupLoad: (_f = (_e = _PgMain.instance) == null ? void 0 : _e.settings.showNoticeOnGroupLoad) != null ? _f : DEFAULT_SETTINGS.showNoticeOnGroupLoad,
      devices: (_h = (_g = _PgMain.instance) == null ? void 0 : _g.settings.devices) != null ? _h : DEFAULT_SETTINGS.devices
    };
    await this.saveData(persistentSettings);
  }
  static groupFromId(id) {
    var _a;
    return (_a = _PgMain.instance) == null ? void 0 : _a.settings.groupsMap.get(id);
  }
};
var PgMain = _PgMain;
PgMain.disableStartupTimeout = 25;
PgMain.pluginId = "obsidian-plugin-groups";
PgMain.deviceNameKey = "obsidian-plugin-groups-device-name";
PgMain.knownPluginIdsKey = "obsidian-plugin-groups-known-plugins";
